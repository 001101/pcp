#! /bin/sh
# PCP QA Test No. 066
# $Revision: 2.17 $
# Test PMCD correctly restores original access control list after
# reconfiguration with a bad config file.
#
# Copyright (c) 1995-2002 Silicon Graphics, Inc.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard filters
. ./common.product
. ./common.filter
. ./common.check

. ./localconfig

tmp=/tmp/$$
trap "rm -f $tmp.*; exit" 0 1 2 3 15

# real QA test starts here

sudo=./sudo
config=$PCP_PMCDCONF_PATH
oconfig=$tmp.pmcd.config
log=$PCP_PMCDLOG_PATH
_needclean=true
LOCALHOST=`hostname`

_filter_log()
{
    sleep 1
    _filter_pmcd_log <$log \
    | grep -v "^access violation from host" \
    | grep -v "^endclient client" \
    | sed \
	-e 's/^$//' \
	-e '/^00[08]:/d' \
	-e '/^linux/s/\/var\//\/usr\//' \
	-e '/localhost/s/[0-9a-f][0-9a-f][0-9a-f]*/MYIPADDR/' \
	-e '/^sample/s/.*/sample agent.../' \
	-e 's;pcp/lib/mips_[^.]*\.;pcp/lib/ISA.;' \
	-e '/client connection from/,/^$/d' \
	-e 's/1 dso/X dso/' \
	-e 's/2 dso/X dso/' \
	-e 's/00001983  0000ffff/83190000  ffff0000/' \
	-e "s;$PCP_PMCDCONF_PATH;\$PCP_PMCDCONF_PATH;g" \
	-e "s;$PCP_VAR_DIR;\$PCP_VAR_DIR;g" \
	-e 's;$PCP_PMDAS_DIR/pmcd/;;'
}

interrupt()
{
    echo "Interrupted"
    exit
}

if [ -d $PCP_LOG_DIR/pmlogger ]
then
    LOGGING_DIR=$PCP_LOG_DIR/pmlogger
else
    LOGGING_DIR=$PCP_LOG_DIR
fi

cleanup()
{
    if [ $_needclean ]
    then
	$sudo $PCP_RC_DIR/pcp stop | _filter_pcp_stop
	if [ -f $oconfig ]
	then
	    $sudo mv $oconfig $config
	fi
	pmafm $LOGGING_DIR/$LOCALHOST/Latest remove >$tmp.cmd 2>&1 \
	    && $sudo sh $tmp.cmd
	echo "Restarting pmcd"
	$sudo $PCP_RC_DIR/pcp start | _filter_pcp_start
	_wait_for_pmcd
	_wait_for_pmlogger
	_needclean=false
    fi
    rm -f $tmp.*
}

_myfilter_config()
{
    sed \
	-e "s/$other1/OTHER1/" \
	-e "s/$other2/OTHER2/" \
	-e "s;$PCP_RC_DIR;\$PCP_RC_DIR;g" \
	-e "s;$PCP_PMDAS_DIR;\$PCP_PMDAS_DIR;g" \
	-e "/^irix/s/.*/[platform PMDA]/" \
	-e "/^linux/s/.*/[platform PMDA]/" \
	-e 's;$PCP_PMDAS_DIR/pmcd/;;' \
    | _filter_pmcd_log
}

pmafm $LOGGING_DIR/$LOCALHOST/Latest remove >$tmp.cmd 2>&1 \
    && $sudo sh $tmp.cmd

trap "interrupt; cleanup; exit" 1 2 3 15
trap "cleanup; exit" 0

cat >$tmp  <<End-of-File
# it has to be pmcd so that $PCP_RC_DIR/pcp restart can start pmlogger
# the OS PMDA has to be there so that the default logging config works
# created by QA 066
#
End-of-File

if [ $PCP_PLATFORM = linux ]
then
    cat >>$tmp  <<End-of-File
linux   60      dso     linux_init      $PCP_PMDAS_DIR/linux/pmda_linux.so
pmcd	2	dso	pmcd_init	$PCP_PMDAS_DIR/pmcd/pmda_pmcd.so
End-of-File
else
    cat >>$tmp  <<End-of-File
irix	1	dso	irix_init	libirixpmda.so
pmcd	2	dso	pmcd_init	pmda_pmcd.so
End-of-File
fi

cat >>$tmp  <<End-of-File

[access]
allow localhost: all;
disallow 131.25.*: store;
disallow *: all;

End-of-File

other1=bogus
other2=bogus

eval `./getpmcdhosts -L -n 2 \
      | $PCP_AWK_PROG '{ if (NF == 2) printf("other1=%s other2=%s\n",$1,$2); }'`

if [ "X$other1" = Xbogus -o "X$other2" = Xbogus ]
then
    echo "Error: Unable to find two other hosts"
    exit 1
fi

cp $config $oconfig
$sudo $PCP_RC_DIR/pcp stop | _filter_pcp_stop
$sudo killall pmgadgets pmchart pmview >/dev/null 2>&1
$sudo mv $tmp $config
$sudo $PCP_RC_DIR/pcp start | _filter_pcp_start
echo "first config:"
_myfilter_config  <$config
echo

cat >$tmp  <<End-of-File

disallow $other1: store;
allow $other2: all;

ddiissallow misspelt: all;
End-of-File

$sudo "cat $tmp >>$config"
echo "second config:"
_myfilter_config <$config

echo
$sudo killall -HUP pmcd
_wait_for_pmcd

# wait for PMCD to finish writing log (or 5 seconds)
for t in 1 2 3 4 5
do
    if [ `egrep '^Host access' $log | wc -l` = 2 ]
    then
	break
    fi
    sleep 1
done

_filter_log
