#! /bin/sh
# PCP QA Test No. 529
# $Revision: 1.13 $
# verify the pmcd.pmie metrics from the pmcd PMDA
#
#
# Copyright (c) 1995-2002 Silicon Graphics, Inc.  All Rights Reserved.
#
# creator
owner=nathans

seq=`basename $0`

. ./localconfig
if [ $PCP_EOE_VER -lt 2100 -o \( $PCP_EOE_VER -ge 6500 -a $PCP_EOE_VER -le 6504 \) ]
then
    echo "Requires PCP >= 2.1 or IRIX > 6.5.4" >$seq.notrun
    echo "$seq: [not run] `cat $seq.notrun`"
    exit 0
fi

echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

_cleanup()
{
    if [ ! -z "$pid3" ]
    then
	$sudo rm -f $PCP_TMP_DIR/pmie/$pid3
	kill -INT $pid3
	pid3=''
    fi
    if [ ! -z "$pid4" ]
    then
	$sudo rm -f $PCP_TMP_DIR/pmie/$pid4
	kill -INT $pid4
	pid4=''
    fi
}

tmp=/tmp/$$
sudo=`pwd`/sudo
status=1	# failure is the default!
trap "_cleanup; rm -f $tmp.*; exit \$status" 0 1 2 3 15
host=`pmhostname`

_filter()
{
    sed \
	-e 's/.*value //' \
	-e "s,/var$tmp,TMP,g" \
	-e "s,$tmp,TMP,g" \
	-e "s/$host/HOST/g"
}

rm -f $seq.full

# real qa test starts here

echo === checking unknown, numrules, actions, expected, true
cat <<End-of-File >$tmp.conf
// the rules
//
all_sample ( sample.long.ten @0..3 < 10 ) -> print "rule1: (BAD)" " %v < 10";
all_sample ( sample.long.ten @0..3 >= 10 ) -> print "rule2: (OK)" " %v >= 10";
sample.long.ten < 10 -> print "rule3: (BAD)" " %v < 10";
sample.long.ten >= 10 -> print "rule4: (OK)" " %v >= 10";
End-of-File

pmie -v -t 1sec -T 4sec -b -l $tmp.out1 $tmp.conf &
pid1=$!
cat $tmp.conf | pmie -v -t 1sec -T 4sec -b -l $tmp.out2 &
pid2=$!

sleep 2

# link the pmie mmap'd files so they persist after the pmie processes
# exit
#
sleep 1000 &
pid3=$!
sleep 1000 &
pid4=$!
$sudo ln $PCP_TMP_DIR/pmie/$pid1 $PCP_TMP_DIR/pmie/$pid3
$sudo ln $PCP_TMP_DIR/pmie/$pid2 $PCP_TMP_DIR/pmie/$pid4

echo "log mandatory on default { pmcd.pmie }" \
| pmlogger -t 1sec -T3sec $tmp

sleep 4

# values at the end of the run should be deterministic for these metrics...
# ... metrics are instantaneous, so 10 samples reported in 9 secs
#
#   numrules = 4
#   expected = 4 rule evaluations every 1 sec (4.0)
#   configfile = "<stdin>" and /tmp/[PID].conf
#
#   actual = 20
#   unknown = 6
#   true = 7
#   false = 7
#   actions = 7
# 

for pid in $pid3 $pid4
do
    echo
    [ $pid = $pid3 ] && echo "first pmie instance ..."
    [ $pid = $pid4 ] && echo "second pmie instance ..."
    echo "pid=$pid ..." >>$seq.full

    for metric in configfile logfile pmcd_host numrules actions \
		eval.true eval.false eval.unknown eval.expected eval.actual
    do
	echo -n "$metric	"
	echo "$metric ..." >>$seq.full
	pmdumplog $tmp pmcd.pmie.$metric \
	| tee -a $seq.full \
	| grep $pid \
	| tail -1 \
	| _filter
    done
done

# success, all done
status=0
exit
