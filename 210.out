QA output created by 210
PMC_IntList l1;
Size = 4, Length = 0
[]

PMC_IntList l2(5);
Size = 5, Length = 0
[]

PMC_IntList l3(4,4);
Size = 4, Length = 4
[4, 4, 4, 4]

PMC_IntList l4(5, numbers);
Size = 5, Length = 5
[2, 4, 6, 8, 10]

PMC_IntList l5(7, 5, numbers);
Size = 7, Length = 5
[2, 4, 6, 8, 10]

PMC_IntList l6(l3);
Size = 4, Length = 4
[4, 4, 4, 4]

PMC_IntList l7 = l5;
Size = 7, Length = 5
[2, 4, 6, 8, 10]

l2 = l7;
Size = 7, Length = 5
[2, 4, 6, 8, 10]

l2[1] = 3;
Size = 7, Length = 5
[2, 3, 6, 8, 10]

l7.head() = 3;
Size = 7, Length = 5
[3, 4, 6, 8, 10]

l7.tail() = 12;
Size = 7, Length = 5
[3, 4, 6, 8, 12]

l7.insert(7);
Size = 7, Length = 6
[7, 3, 4, 6, 8, 12]

l7.insert(9, 3);
Size = 7, Length = 7
[7, 3, 4, 9, 6, 8, 12]

l7.insert(15, 6);
Size = 14, Length = 8
[7, 3, 4, 9, 6, 8, 15, 12]

l7.insert(5, numbers, 2);
Size = 14, Length = 13
[7, 3, 2, 4, 6, 8, 10, 4, 9, 6, 8, 15, 12]

l7.insert(2, numbers, 10);
Size = 26, Length = 15
[7, 3, 2, 4, 6, 8, 10, 4, 9, 6, 2, 4, 8, 15, 12]

l4.insert(l2);
Size = 10, Length = 10
[2, 3, 6, 8, 10, 2, 4, 6, 8, 10]

l4.insert(l1);
Size = 10, Length = 10
[2, 3, 6, 8, 10, 2, 4, 6, 8, 10]

l4.append(3);
Size = 20, Length = 11
[2, 3, 6, 8, 10, 2, 4, 6, 8, 10, 3]

l4.append(4, numbers);
Size = 20, Length = 15
[2, 3, 6, 8, 10, 2, 4, 6, 8, 10, 3, 2, 4, 6, 8]

l4.append(l1);
Size = 20, Length = 15
[2, 3, 6, 8, 10, 2, 4, 6, 8, 10, 3, 2, 4, 6, 8]

l3.append(l5);
Size = 9, Length = 9
[4, 4, 4, 4, 2, 4, 6, 8, 10]

l5.append(l2);
Size = 10, Length = 10
[2, 4, 6, 8, 10, 2, 3, 6, 8, 10]

l7.remove(0, 5);
Before:
Size = 26, Length = 15
[7, 3, 2, 4, 6, 8, 10, 4, 9, 6, 2, 4, 8, 15, 12]

After:
l7.remove(0, 5);
Size = 26, Length = 10
[8, 10, 4, 9, 6, 2, 4, 8, 15, 12]

l8.remove(l8.length() - 4, 4);
Before:
Size = 15, Length = 15
[2, 3, 6, 8, 10, 2, 4, 6, 8, 10, 3, 2, 4, 6, 8]

After:
Size = 15, Length = 11
[2, 3, 6, 8, 10, 2, 4, 6, 8, 10, 3]

l4.remove(l4.length() - 4, 4);
Before:
Size = 20, Length = 15
[2, 3, 6, 8, 10, 2, 4, 6, 8, 10, 3, 2, 4, 6, 8]

After:
Size = 20, Length = 11
[2, 3, 6, 8, 10, 2, 4, 6, 8, 10, 3]

l3.removeAll();
Before:
Size = 9, Length = 9
[4, 4, 4, 4, 2, 4, 6, 8, 10]

After:
Size = 9, Length = 0
[]

l4.destroy(3, 5);
Size = 6, Length = 6
[2, 3, 6, 8, 10, 3]

l4.destroyAll();
Size = 2, Length = 0
[]

l7.resize(l&.length() + 2);
Size = 12, Length = 10
[8, 10, 4, 9, 6, 2, 4, 8, 15, 12]

l7.sync();
Size = 10, Length = 10
[8, 10, 4, 9, 6, 2, 4, 8, 15, 12]

l7.resize(l&.length() - 2);
Size = 8, Length = 8
[8, 10, 4, 9, 6, 2, 4, 8]

l4.insert(5, numbers);
Size = 5, Length = 5
[2, 4, 6, 8, 10]

l3.append(l7);
Size = 9, Length = 8
[8, 10, 4, 9, 6, 2, 4, 8]


****  Purify instrumented TMP/pmc_list.pure (pid PID)  ****
Current file descriptors in use: 5
FIU: file descriptor 0: <stdin>
FIU: file descriptor 1: <stdout>
FIU: file descriptor 2: <stderr>

****  Purify instrumented TMP/pmc_list.pure (pid PID)  ****
Purify: Searching for all memory leaks...

Memory leaked: 0 bytes (0%); potentially leaked: 0 bytes (0%)

Purify Heap Analysis (combining suppressed and unsuppressed blocks)
...
****  Purify instrumented TMP/pmc_list.pure (pid PID)  ****
  * Program exited with status code 0.
  * 0 access errors, 0 total occurrences.
...
