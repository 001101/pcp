#! /bin/sh
# PCP QA Test No. 178
# $Revision: 2.9 $
# pmlogextract exerciser
#
# Copyright (c) 1995-2002 Silicon Graphics, Inc.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard filters
. ./common.product
. ./common.filter

tmp=/tmp/$$
trap "rm -f $tmp.*; exit" 0 1 2 3 15

_filter()
{
    $PCP_AWK_PROG '
/\<mark\>/	{ next }
/suspended/	{ next }
/No values/	{ noval++; next }
/\?/		{ noval++; next }
/^[0-2][0-9]:/	{ sample++; next }
END		{ printf "%d samples",sample
		  if (noval > 0) printf ", %d \"no values\"",noval
		  print ""
		}'
}

_range()
{
    $PCP_AWK_PROG '
'$1' <= $1 && $1 <= '$2'	{ print "Pass",$2,$3; next }
				{ print "Fail (" $1 " " $2 " " $3 ")" }'
}

_stamp()
{
    sed -e 's/ [0-2][0-9]:.*$/ datestamp/'
}

_count_rec()
{
    $PCP_AWK_PROG '
/^[0-2][0-9]:.*\<mark\>/	{ mark++; next }
/^[0-2][0-9]:/			{ rec++; next }
END				{ printf "%d",rec
				  if (mark == 1) printf " (+%d mark)",mark
				  else if (mark > 1) printf " (+%d marks)",mark
				  print ""
				}'
}

# real QA test starts here
cat >$tmp.a.config <<End-of-File
log mandatory on 600 msec sample.bin
End-of-File

cat >$tmp.b.config <<End-of-File
log mandatory on 300 msec {
	sample.bin [ "bin-200" ]
	sample.drift
}
End-of-File

cat >$tmp.c.config <<End-of-File
log mandatory on 300 msec {
	sample.bin
	sample.drift
}
End-of-File

# a and b concurrently
# a: 25 x 0.6 sec
# b: 20 x 0.3 sec
#
pmlogger -c $tmp.a.config -l $tmp.a.log -s 25 $tmp.a >$tmp.a.err 2>&1 &
pmlogger -c $tmp.b.config -l $tmp.b.log -s 20 $tmp.b >$tmp.b.err 2>&1 &

wait
cat $tmp.a.err $tmp.a.log | _filter_pmlogger_log
cat $tmp.b.err $tmp.b.log | _filter_pmlogger_log

# c later
#
pmlogger -c $tmp.c.config -l $tmp.c.log -s 10 $tmp.c >$tmp.c.err 2>&1
cat $tmp.c.err $tmp.c.log | _filter_pmlogger_log

echo "Full merge ..."
rm -f $tmp.merge.*
pmlogextract $tmp.a $tmp.b $tmp.c $tmp.merge
echo "Log record counts ..."
rm -f $seq.full
for i in a b c merge
do
    echo -n "$i: "
    pmdumplog -m $tmp.$i | _count_rec
done

echo
echo 'sample.bin ["bin-200"] ... expect 55 samples'
pmval -i "bin-200" -U $tmp.merge sample.bin 2>&1 \
| _filter

echo
echo 'sample.bin ["bin-100"] ... expect 35 samples, 20 no values'
pmval -i "bin-100" -U $tmp.merge sample.bin 2>&1 \
| _filter

echo
echo "sample.drift ... expect 30 samples"
pmval -U $tmp.merge sample.drift 2>&1 \
| _filter

echo
echo "merge -s 10"
rm -f $tmp.merge.*
pmlogextract -s 10 $tmp.a $tmp.b $tmp.c $tmp.merge
echo -n "merge (expect 10): "
pmdumplog -m $tmp.merge \
| _count_rec

# all of b + 11 from a
#
echo
echo "merge -T 6.9"
rm -f $tmp.merge.*
pmlogextract -T 6.9 $tmp.a $tmp.b $tmp.c $tmp.merge
echo -n "merge (expect 31 + 2 preamble + 1 mark): "
pmdumplog -m $tmp.merge \
| _count_rec

# tail of a (less 1), none of b or c
echo
echo "merge -S 6.9 -T 7.2"
rm -f $tmp.merge.*
pmlogextract -S 6.9 -T 7.2 $tmp.a $tmp.b $tmp.c $tmp.merge
echo -n "merge (expect 12): "
pmdumplog -m $tmp.merge \
| _count_rec

echo
echo "Full merge with volume switch ..."
rm -f $tmp.merge.*
pmlogextract -v 15 $tmp.a $tmp.b $tmp.c $tmp.merge 2>&1 \
| tee -a $seq.full \
| _stamp
echo "Log record counts ..."
for i in a b c merge
do
    echo -n "$i: "
    pmdumplog -m $tmp.$i \
    | _count_rec
done

