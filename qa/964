#!/bin/sh
# PCP QA Test No. 964
# Ensure pmlogger not (re)started via PMDA Install.
#
# Copyright (c) 2015-2016 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ -d $PCP_PMDAS_DIR/xfs ] || _notrun "xfs PMDA directory is not installed"
[ -d $PCP_PMDAS_DIR/dm ] || _notrun "dm PMDA directory is not installed"

[ -f /etc/gentoo-release ] && _notrun "Gentoo is lacking chkconfig support"
[ -f /etc/slackware-version ] && _notrun "Slackware is lacking chkconfig support"

if `which dmsetup >/dev/null 2>&1`
then
    :
else
    _notrun "dm PMDA cannot be installed without dmsetup"
    # NOTREACHED
fi

status=1	# failure is the default!
LOCALHOST=`hostname`
_needclean=true
$sudo rm -rf $tmp $tmp.* $seq.full

if $PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep "$PCP_BINADM_DIR/[p]mmgr " >/dev/null
then
    pmmgr_running=true
    _stop_auto_restart pmmgr
else
    pmmgr_running=false
fi

_interrupt()
{
    status=1
}

_cleanup()
{
    cd $here
    if $_needclean
    then
	echo "Resetting system state"

	[ -n "$current_pmda" ] && _restore_pmda_install $current_pmda
	_service pmcd restart | _filter_pcp_start
	_restore_auto_restart pmcd
	if $pmmgr_running
	then
	    _service pmmgr stop >>$here/$seq.full
	    _restore_auto_restart pmmgr
	fi
	_wait_for_pmcd
	_wait_for_pmlogger
	_needclean=false
    fi
    $sudo rm -f $tmp.*
    exit $status
}

trap "_cleanup" 0
trap "_interrupt; _cleanup" 1 2 3 15

_stop_auto_restart pmcd

_find_primary_pmlogger()
{
    if [ -d $PCP_TMP_DIR/pmlogger ]
    then
	cd $PCP_TMP_DIR/pmlogger
	ls -l >>$here/$seq.full
	if [ -L primary ]
	then
	    echo "`ls -l primary | sed -e 's;.*/;;'`"
	else
	    echo "No primary logger file?" >>$here/$seq.full
	fi
    fi
}

_filter_xfs_install()
{
    _filter_pmda_install \
    | _filter_pcp_stop \
    | tee -a $here/$seq.full \
    | $PCP_AWK_PROG '
/Check xfs metrics have appeared/ { if ($7 >= 0) $7 = "X"
                                           if ($10 >= 0) $10 = "Y"
                                         }
                                         { print }'
}

_filter_dm_install()
{
    _filter_pmda_install \
    | _filter_pcp_stop \
    | tee -a $here/$seq.full \
    | $PCP_AWK_PROG '
/Check dmthin metrics have appeared/	{ if ($7 >= 0) $7 = "X"
                                           if ($10 >= 0) $10 = "Y"
                                        }
/Check dmcache metrics have appeared/	{ if ($7 >= 0) $7 = "X"
                                           if ($10 >= 0) $10 = "Y"
                                        }
                                        { print }'
}

# real QA test starts here
_prepare_pmda_install xfs
current_pmda=xfs

# switch off pmcd
_service pmcd stop | _filter_pcp_stop

# and pmmgr (maybe)
$pmmgr_running && _service pmmgr stop >>$here/$seq.full

# give the dust a chance to settle ...
sleep 3

pid=`_find_primary_pmlogger`
if [ -n "$pid" ]
then
    echo "Found primary pmlogger"
else
    echo "Error: primary pmlogger missing?"
fi
echo

# install a PMDA, which should restart only pmcd
cd $PCP_PMDAS_DIR/xfs
$sudo ./Install < /dev/null 2>&1 | _filter_xfs_install
_wait_for_pmlogger

# verify primary pmlogger still running
echo "Expect same primary pmlogger to be running ..."
newpid=`_find_primary_pmlogger`
if [ -n "$newpid" ]
then
    if [ "$pid" = "$newpid" ]
    then
	echo "Found same primary pmlogger"
    else
	echo "Found new primary pmlogger"
	echo "Error: PID changed from $pid to $newpid"
	pid=$newpid
    fi
else
    echo "Error: primary pmlogger missing?"
fi
echo
$sudo ./Remove </dev/null \
| tee -a $here/$seq.full \
| _filter_pmda_remove

_restore_pmda_install xfs
_prepare_pmda_install dm
current_pmda=dm

# install a PMDA, should restart pmcd ...
# historically this would have caused the primary pmlogger to
# be restarted, but these days pmlogger will reconnect to the new
# pmcd here ...
#
cd $PCP_PMDAS_DIR/dm
$sudo ./Install < /dev/null 2>&1 | _filter_dm_install
_wait_for_pmlogger

# verify pmlogger is running
echo "Expect same primary pmlogger to be running ..."
newpid=`_find_primary_pmlogger`
if [ -n "$newpid" ]
then
    if [ "$pid" = "$newpid" ]
    then
	echo "Found same primary pmlogger"
    else
	echo "Found new primary pmlogger"
	echo "Error: PID changed from $pid to $newpid"
    fi
else
    echo "Error: primary pmlogger missing?"
fi
echo
$sudo ./Remove </dev/null \
| tee -a $here/$seq.full \
| _filter_pmda_remove

# success, all done
status=0
exit
