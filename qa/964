#!/bin/sh
# PCP QA Test No. 964
# Ensure pmlogger not started via PMDA Install if it is
# not chkconfig'd on.
#
# Copyright (c) 2015 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ -d $PCP_PMDAS_DIR/xfs ] || _notrun "xfs PMDA directory is not installed"

[ -f /etc/gentoo-release ] && _notrun "Gentoo is lacking chkconfig support"
[ -f /etc/slackware-version ] && _notrun "Slackware is lacking chkconfig support"

status=1	# failure is the default!
LOCALHOST=`hostname`
_needclean=true
$sudo rm -rf $tmp $tmp.* $seq.full

_interrupt()
{
    status=1
}

_cleanup()
{
    cd $here
    if $_needclean
    then
	echo "Resetting system state"
	_restore_loggers
	_change_config pmlogger on
	_restore_pmda_install xfs
	pmafm $LOGGING_DIR/$LOCALHOST/Latest remove >$tmp.cmd 2>&1 \
	&& $sudo sh $tmp.cmd
	$sudo $PCP_RC_DIR/pcp restart | _filter_pcp_start
	_wait_for_pmcd
	_wait_for_pmlogger
	_needclean=false
    fi
    $sudo rm -f $tmp.*
    exit $status
}

trap "_cleanup" 0
trap "_interrupt; _cleanup" 1 2 3 15

_count_pmloggers()
{
    count=0
    if [ -d $PCP_TMP_DIR/pmlogger ]
    then cd $PCP_TMP_DIR/pmlogger
    else return 0
    fi

    ls -l >>$here/$seq.full
    plist=`ls -1`
    cd $here

    for process in $plist
    do
	[ "$process" = "primary" ] && continue
	ps -p $process >>$here/$seq.full 2>&1
	if [ $? = 1 ]
	then
	    echo "urk, $PCP_TMP_DIR/pmlogger/$process has no running pmlogger instance"
	else
	    count=`expr $count + 1`
	fi
    done

    return $count
}

_filter_xfs_install()
{
    _filter_pmda_install | _filter_pcp_stop | $PCP_AWK_PROG '
/Check xfs metrics have appeared/ { if ($7 >= 0) $7 = "X"
                                           if ($10 >= 0) $10 = "Y"
                                         }
                                         { print }'
}

# real QA test starts here
_prepare_pmda_install xfs
_disable_loggers
_change_config pmlogger off
pmafm $LOGGING_DIR/$LOCALHOST/Latest remove >$tmp.cmd 2>&1 \
&& $sudo sh $tmp.cmd

# switch off pmcd and pmlogger
$sudo $PCP_RC_DIR/pcp stop | _filter_pcp_stop

# need to go round and smack all the pmloggers ... some might be
# sleeping and not yet notice pmcd has gone away
#
$PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep pmlogger >>$here/$seq.full
for i in 1 2 3 4 5
do
    plist=`_get_pids_by_name pmlogger`
    [ -z "$plist" ] && break
    echo "iteration $i: killing pids: $plist" >>$here/$seq.full
    $sudo kill -TERM $plist
    sleep 1
done

_count_pmloggers
echo "pmlogger count after pcp stop (expect 0): $?" | tee -a $here/$seq.full
echo

# install a PMDA, which should restart only pmcd
cd $PCP_PMDAS_DIR/xfs
$sudo ./Install < /dev/null 2>&1 | _filter_xfs_install

# verify no pmloggers running
_count_pmloggers
echo "pmlogger count at end of Install (expect 0): $?" | tee -a $here/$seq.full
echo

# switch default pmlogger on once more
_restore_loggers
_change_config pmlogger on

# install a PMDA, should restart both pmcd and pmlogger
cd $PCP_PMDAS_DIR/xfs
$sudo ./Install < /dev/null 2>&1 | _filter_xfs_install

# verify pmlogger is running
_count_pmloggers
echo "pmlogger count at end of Install (expect 1): $?" | tee -a $here/$seq.full
echo

# success, all done
status=0
exit
