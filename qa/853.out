QA output created by 853
=== simple cases ===
----------------------
text from .inc file
Firstly, there is the mumble and "fumble" ...
what about urk ? expect this to be \u\r\k not \e\e\k
urk at start of line
at end of line urk
text from .in file
not-defined if-part
defined else-part
Text at end of file.
----------------------
text from .inc file
Firstly, there is the mumble and "fumble" ...
what about urk ? expect this to be \u\r\k not \e\e\k
urk at start of line
at end of line urk
text from .in file
not-defined else-part
defined if-part
Text at end of file.
----------------------

=== expansion with -r ===
----------------------
text from .inc file
Firstly, there is the mumble ...
what about eek ? expect this to be \u\r\k not \e\e\k
eek at start of line
at end of line eek
text from .in file
not-defined if-part
defined else-part
Text at end of file.
----------------------
<<macro eek="urk"
<<macro mumble="mumble and "fumble""
text from .inc file
Firstly, there is the mumble ...
<<name="%eek"
<<value="urk"
what about urk ? expect this to be \u\r\k not \e\e\k
<<name="%{eek}"
<<value="urk"
and what about urk ? expect this to be \u\r\k not \e\e\k
<<name="%eek"
<<value="urk"
urk <percent>eek at start of line
<<name="%eek"
<<value="urk"
<percent>eek at end of line urk
<<name="%{eek}"
<<value="urk"
urk <percent>{eek} at start of line
<<name="%{eek}"
<<value="urk"
<percent>{eek} at end of line urk
text from .in file
<<lines: in 14 out 9 (modified 6) substitutions: 6
----------------------

=== -D on command line cases ===
----------------------
blah=blah=blah=... from .inc file
Firstly, there is the mumble and "fumble" ...
what about urk ? expect this to be \u\r\k not \e\e\k
urk at start of line
at end of line urk
blah=blah=blah=... from .in file
not-defined if-part
defined else-part
Text at end of file.
----------------------
blah blah blah ... from .inc file
Firstly, there is the mumble and "fumble" ...
what about urk ? expect this to be \u\r\k not \e\e\k
urk at start of line
at end of line urk
blah blah blah ... from .in file
not-defined if-part
defined else-part
Text at end of file.
----------------------

=== error cases ===
----------------------
foo
pmcpp: <stdin>:
pmcpp: Error: End of input and no matching %endif for %ifdef or %ifndef at line 2
----------------------
%macro value with embedded newline - bad
pmcpp: <stdin>[2]: %define multi 'one line
pmcpp: Error: Unterminated value string in %define
----------------------
# 1 "<stdin>"
# exposed #else outside #if ... scope
test
pmcpp: <stdin>[3]: #else
pmcpp: Error: No matching #ifdef or #ifndef for #else
----------------------

=== macro name and corner-case expansion tests ===
----------------------
What about urk?  [expect urk]
----------------------
<<macro long_macro_name_and_short_value="!"
<<macro x="^a very long macro value to be sure, to be sure$"
<<name="%"
<<name="%{long_macro_name_and_short_value}"
<<value="!"
<<name="%{long_macro_name_and_short_value}"
<<value="!"
<<name="%{long_macro_name_and_short_value}"
<<value="!"
<<name="%"
<<name="%"
<<name="%"
some text %!!!% [expect %!!!%]
<<name="%x"
<<value="^a very long macro value to be sure, to be sure$"
<<name="%x"
<<value="^a very long macro value to be sure, to be sure$"
<<name="%x"
<<value="^a very long macro value to be sure, to be sure$"
[expect ^...$^...$^...$] ^a very long macro value to be sure, to be sure$^a very long macro value to be sure, to be sure$^a very long macro value to be sure, to be sure$
<<lines: in 4 out 2 (modified 2) substitutions: 6
----------------------

=== conditionals, bells and whistles ===
----------------------

log mandatory on 1minute {
    disk.dev
}

----------------------

log mandatory on 1minute {
    disk.dev
}

log mandatory on 15 sec {
    kernel.all.cpu.user
    kernel.all.cpu.sys
}
----------------------
