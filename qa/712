#!/bin/sh
# PCP QA Test No. 712
#
# Exercise encrypted communications between pmcd/clients (local)
# Copyright (c) 2012 Red Hat.
#

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

seq=`basename $0`

[ $PCP_VER -ge 3611 ] || _notrun "Installed pcp is too old"
eval `pmconfig -L`
[ "$secure_sockets" = "true" ] || _notrun "Secure sockets not supported"
which certutil >/dev/null 2>&1 || _notrun "certutil not installed (NSS tools)"
[ -c /dev/urandom ] || _notrun "No random number generator special file found"

echo "QA output created by $seq"

usersdb=${HOME}/.pcp/ssl
monitordb=${PCP_VAR_DIR}/config/ssl/monitor
collectordb=${PCP_VAR_DIR}/config/ssl/collector

_cleanup()
{
    # restore any modified pmcd configuration files
    for cf in $PCP_PMCDOPTIONS_PATH
    do
	if test -f $cf.$seq
	then
	    $sudo rm -f $cf
	    $sudo mv $cf.$seq $cf
	fi
    done

    # restore certificate DBs from existing installation
    for db in $collectordb $monitordb $usersdb
    do
	if test -d $db.$seq
	then
	    $sudo rm -fr $db
	    $sudo mv $db.$seq $db
	fi
    done

    unset PCP_SECURE_CONTEXT
    $sudo $PCP_RC_DIR/pcp restart | _filter_pcp_start
    _wait_for_pmcd
    _wait_for_pmlogger
    $sudo rm -f $tmp.*
}

status=1	# failure is the default!
$sudo rm -rf $tmp.* $seq.full
trap "_cleanup; exit \$status" 0 1 2 3 15
$sudo $PCP_RC_DIR/pcp stop | _filter_pcp_stop

# backup pmcd configuration and certificate DBs from existing installation
for f in $PCP_PMCDOPTIONS_PATH $collectordb $monitordb $usersdb
do
    [ -e $f ] && $sudo mv $f $f.$seq
done

qahost=`_get_fqdn`

_filter_pminfo()
{
    sed \
	-e "s/$qahost/QAHOST/g" \
	-e 's/value [0-9][0-9]*/value NUMBER/'
}

# prepare new locations for certificates
$sudo mkdir -m 0700 $collectordb
echo "$seq.password" > $tmp.pass
dd if=/dev/urandom of=$tmp.rand bs=1 count=10000 >/dev/null 2>&1
certopts="-d $collectordb -f $tmp.pass -z $tmp.rand"

# create a DB and self-signed (-x) server certificate locally
echo "== Creating certificate DB and local certificates" | tee -a $seq.full
$sudo certutil $certopts -N
$sudo certutil $certopts -S -x \
	-n "CA certificate" -s "cn=Local PCP Installation, dc=pcp,dc=org"  \
	-t "CT,,"  -m 1000 -v 120 -k rsa >> $seq.full 2>&1
$sudo certutil $certopts -S \
	-n "PCP Collector certificate" -s "cn=$qahost" \
	-c "CA certificate" \
	-t "u,u,u" -m 1001 -v 120 -k rsa >> $seq.full 2>&1
echo "== Certificate DB and local certificates created" | tee -a $seq.full

# export ascii copy of the certificate for later use
$sudo certutil $certopts -L -n "CA certificate" -a > $tmp.cacert.asc

# real QA test starts here

cat <<End-Of-File >>$tmp.options
# Dummy lines added by PCP QA test $seq
#
-l $tmp.pmcd.log
-P $tmp.pass
End-Of-File
$sudo cp $tmp.options $PCP_PMCDOPTIONS_PATH
echo "Start pmcd, modified \$PCP_PMCDOPTIONS_PATH (pmcd.options):" | tee -a $seq.full
$sudo $PCP_RC_DIR/pcp restart | tee -a $seq.full >$tmp.out
_wait_for_pmcd
grep -i 'starting pmcd' $tmp.out | sed -e "s/$$/MYPID/" | _filter_pcp_start
echo "Checking pmcd.log for unexpected messages" | tee -a $seq.full
egrep 'Error:|Info:' $tmp.pmcd.log
cat $tmp.pmcd.log >> $seq.full

# all client connection attempts from here on must be encrypted
export PCP_SECURE_CONTEXT=1

# verify that local clients cannot establish a connection
# without having a valid certificate database setup.
$sudo rm -fr $usersdb $monitordb
echo "checking client, no certificate at all.  should fail..." | tee -a $seq.full
pminfo -f hinv.ncpu 2>&1 | tee -a $seq.full | _filter_pminfo

# make the new certificate visible to all local clients
echo "checking client, site certificate only.  should pass..."
$sudo rm -fr $usersdb $monitordb
$sudo mkdir -m 0700 $monitordb
$sudo certutil -A -d $monitordb -n "CA certificate" -t "CT,," -a -i $tmp.cacert.asc
pminfo -f hinv.ncpu 2>&1 | tee -a $seq.full | _filter_pminfo

# make the new certificate visible to just this user
echo "checking client, user certificate only.  should pass..."
$sudo rm -fr $usersdb $monitordb
mkdir -m 0700 $usersdb
certutil -A -d $usersdb -n "CA certificate" -t "CT,," -a -i $tmp.cacert.asc
pminfo -f hinv.ncpu 2>&1 | tee -a $seq.full | _filter_pminfo

# success, all done
status=0
exit
