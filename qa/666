#! /bin/sh
# PCP QA Test No. 666
# checks basic pmmgr functionality
#
# Copyright (c) 2014-2015 Red Hat, Inc.
#
seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check


which pmmgr >/dev/null 2>&1 || _notrun "No pmmgr binary installed"
echo pmmgr ok

$sudo rm -fr $tmp.dir
$sudo rm -f $tmp.*
rm -f $seq.full

signal=$PCP_BINADM_DIR/pmsignal
status=1	# failure is the default!
username=`id -u -n`
trap "_cleanup" 0 1 2 3 15


# Shorten timeouts because of the rapid-fire pmcd/pmmgr-daemon livespan tests
PMCD_WAIT_TIMEOUT=1
PMCD_CONNECT_TIMEOUT=1
PMCD_RECONNECT_TIMEOUT=1
export PMCD_WAIT_TIMEOUT PMCD_CONNECT_TIMEOUT PMCD_RECONNECT_TIMEOUT


_cleanup()
{
    if [ -n "$pid" ]; then kill $pid; fi
    $sudo rm -fr $tmp.dir
    $sudo rm -f $tmp.*
    exit $status
}

_filter()
{
    tee -a $seq.full |
    sed -e 's,^\[.*\],TIMESTAMP,' \
        -e 's,pmmgr.[0-9]*/[0-9]*.,pmmgr(PID/TID),' \
        -e 's,hostid [a-zA-Z0-9_-.]*,hostid HOSTID,' \
        -e 's,at [a-zA-Z0-9_-.:]*,at LOCAL,' \
        -e 's,'$tmp.dir',TMPDIR,'
}

_filter2()
{
    tee -a $seq.full |
    sed -e 's,'`hostname`',HOSTNAME,' \
        -e 's,[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\.[0-9][0-9][0-9][0-9][0-9][0-9],YYYYMMDD-HHMMSS,'
}

# This test prereqs only pmcd running locally.
# In the future, remote, avahi

date >> $seq.full
echo "=== 1. prepare blank pmmgr config directory  ===" | tee -a $seq.full
$sudo rm -rf $tmp.dir
mkdir $tmp.dir

date >> $seq.full
echo "=== 2. pmmgr barenaked startup  ===" | tee -a $seq.full
echo 'local:' > $tmp.dir/target-host
echo 'localhost' > $tmp.dir/target-host
echo 'localhost6' > $tmp.dir/target-host
$PCP_BINADM_DIR/pmmgr -U $username -v -v -p 5 -l $tmp.out -c $tmp.dir &
pid=$!
echo "pid=$!" >>$seq.full

date >> $seq.full
echo "=== 3. look for pmmgr starting no daemons ===" | tee -a $seq.full
$sudo $PCP_RC_DIR/pmcd start >/dev/null 2>&1
sleep 10
$sudo $PCP_RC_DIR/pmcd stop >/dev/null 2>&1
sleep 10 # pmmgr daemon shutdown
ls -1 $tmp.dir # should be almost empty

date >> $seq.full
echo "=== 4. add control files to start pmlogger and pmie ===" | tee -a $seq.full
echo '-t 1' > $tmp.dir/pmlogger
touch $tmp.dir/pmie
touch $tmp.dir/pmlogconf
touch $tmp.dir/pmieconf
echo $tmp.dir > $tmp.dir/log-directory  # same dir

date >> $seq.full
echo "=== 5. restart pmcd a few times to get a bunch of pmlogger archives ===" | tee -a $seq.full
for x in `seq 5`
do
    echo restart $x `date` >> $seq.full
    rm -f $tmp.dir/`hostname`/config.pmie $tmp.dir/`hostname`/config.pmlogger
    $sudo $PCP_RC_DIR/pmcd start >/dev/null 2>&1
    i=0;
    # wait up to 30ish seconds for pm*conf to run
    while [ $i -lt 5 ]; do
        i=`expr $i + 1`
        if [ -f $tmp.dir/`hostname`/config.pmlogger -a -f $tmp.dir/`hostname`/config.pmie ]; then
            sleep 5 # time enough after pm*conf to start pmlogger+pmie proper
            break
        fi
        sleep 5
    done
    $sudo $PCP_RC_DIR/pmcd stop >/dev/null 2>&1
    sleep 10 # pmmgr daemon shutdown
done

date >> $seq.full
echo "=== 6. check the directories ===" | tee -a $seq.full
# there should be five archives
ls -1 $tmp.dir/`hostname` | _filter2
ls -lR $tmp.dir >> $seq.full # for reference
for f in $tmp.dir/`hostname`/*.meta; do
    echo == $f ==>> $seq.full
    pmloglabel -L $f >> $seq.full
done

date >> $seq.full
echo "=== 7. add log-merging/rewriting, sans pmFOOconf ===" | tee -a $seq.full
touch $tmp.dir/pmlogrewrite
touch $tmp.dir/pmlogmerge
echo '-t 2 -c '$tmp.dir/`hostname`/config.pmlogger > $tmp.dir/pmlogger
echo '-c '$tmp.dir/`hostname`/config.pmie > $tmp.dir/pmie
rm $tmp.dir/pmlogconf
rm $tmp.dir/pmieconf
# ^^^ so pmmgr will react to pmcd restarts rather quickly
echo 5min > $tmp.dir/pmlogmerge-retain
$sudo $PCP_RC_DIR/pmcd start >/dev/null 2>&1
sleep 20 # enough time to get new daemons started up, logs rotated/merged
$sudo $PCP_RC_DIR/pmcd stop >/dev/null 2>&1
sleep 10 # pmmgr daemon shutdown

date >> $seq.full
echo "=== 8. recheck the directories past retain/merge ===" | tee -a $seq.full
# there should be only two; one merged and one just-written-to
ls -1 $tmp.dir/`hostname` | _filter2
ls -lR $tmp.dir >> $seq.full # for reference
for f in $tmp.dir/`hostname`/*.meta; do
    echo == $f == >> $seq.full
    pmloglabel -L $f >> $seq.full
done

date >> $seq.full
echo "=== 9. how about some granular mode ===" | tee -a $seq.full
echo 20sec > $tmp.dir/pmlogmerge
rm $tmp.dir/pmlogrewrite # separately tested
touch $tmp.dir/pmlogmerge-granular
echo 40sec > $tmp.dir/pmlogmerge-retain
$sudo $PCP_RC_DIR/pmcd start >/dev/null 2>&1

date >> $seq.full
echo "=== 10. wait a bit ===" | tee -a $seq.full
# long enough for all the old archives to age out, only new granular stuff to survive
# not an exact multiple of the pmlogmerge period, to avoid testing the edge moments
sleep 50 # >> pmlogmerge-retaion
$sudo $PCP_RC_DIR/pmcd stop >/dev/null 2>&1  # ensure daemons stop & no new ones are started
sleep 10 # pmmgr daemon shutdown

$date >> $seq.full
echo "=== 11. admire grained / retained data ===" | tee -a $seq.full
$# there should be 3 archives
ls -1 $tmp.dir/`hostname` | _filter2
ls -lR $tmp.dir >> $seq.full # for reference
for f in $tmp.dir/`hostname`/*.meta; do
    echo == $f ==>> $seq.full
    pmloglabel -L $f >> $seq.full
done

date >> $seq.full
echo "=== ZZZ kill pmmgr ===" | tee -a $seq.full
kill $pid
pid=
sleep 2

echo "== collecting full pmmgr logs:" >> $seq.full
cat $tmp.out >> $seq.full

echo "== collecting recent daemon logs:" >> $seq.full
grep . $tmp.dir/`hostname`/*.log >> $seq.full

# restart pmcd
$sudo $PCP_RC_DIR/pmcd restart >/dev/null 2>&1

status=0
sleep 2
exit
