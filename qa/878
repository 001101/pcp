#!/bin/sh
# PCP QA Test No. 878
# Exercise pmdapipe output capture.
#
# Copyright (c) 2015 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ -f $PCP_PMDAS_DIR/pipe/pmdapipe ] || _notrun "pipe PMDA not installed"

status=1	# failure is the default!
$sudo rm -rf $tmp $tmp.* $seq.full

_filter_pipe()
{
    # cull message resulting from no running httpd
    grep -v 'No value(s) available'
}

pmdapipe_remove()
{
    echo
    echo "=== remove pipe agent ==="
    $sudo ./Remove >$tmp.out 2>&1
    _filter_pmda_remove <$tmp.out
}

pmdapipe_install()
{
    # start from known starting points
    cd $PCP_PMDAS_DIR/pipe
    $sudo ./Remove >/dev/null 2>&1
    $sudo $PCP_RC_DIR/pmcd stop 2>&1 | _filter_pcp_stop

    echo
    echo "=== pipe agent installation ==="
    $sudo ./Install </dev/null >$tmp.out 2>&1
    cat $tmp.out >>$here/$seq.full
    # Check pipe metrics have appeared ... X metrics and Y values
    _filter_pmda_install <$tmp.out \
    | sed \
        -e '/^Waiting for pmcd/s/\.\.\.[. ]*$/DOTS/' \
        -e 's/[0-9][0-9]* warnings, //' \
    | $PCP_AWK_PROG '
/Check pipe metrics have appeared/ { if ($7 >= 5 && $7 <= 25) $7 = "X"
                                     if ($10 >= 3 && $10 <= 25) $10 = "Y"
                                   }
                                   { print }'
}

_prepare_pmda pipe
trap "_cleanup_pmda pipe; exit \$status" 0 1 2 3 15

# real QA test starts here
pmdapipe_install

# pmcd should have been started by the Install process - check
# a sub-tree that is known-good for all pipe versions
# and setup states.
if pminfo -v pipe > $tmp.info 2> $tmp.err
then
    :
else
    echo "... failed! ... here is the Install log ..."
    cat $tmp.out
fi
cat $tmp.info $tmp.err | _filter_pipe

pmdapipe_remove
status=0
exit
