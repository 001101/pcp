#!/bin/sh
# PCP QA Test No. 506
# check 2^31 volume switching for pmlogrewrite
#
# Copyright (c) 2011 Ken McDonell.  All Rights Reserved.
#

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

seq=`basename $0`

rm -f big2.*

# Filesystem           1M-blocks Used Available Use% Mounted on
# /dev/sda5                57349     24838     29621  46% /
free=`df -m . \
| $PCP_AWK_PROG '
NR == 2	{ print $4 }'`

rm -f .notrun
if [ -z "$free" ]
then
    _notrun "Cannot determine free disk space (df -m fails)"
elif [ "$free" -lt 10240 ]
then
    # 10GB should keep us out of trouble
    _notrun "Insufficient free disk space ($free MB)"
    :
elif [ ! -f big1.0 ]
then
    _notrun "big1 archive missing, run QA 441 first!"
fi

echo "QA output created by $seq"

status=0	# success is the default!
$sudo rm -rf $tmp.* $seq.full
trap "rm -f $tmp.* big2.*; exit \$status" 0 1 2 3 15

_size()
{
    if [ $PCP_PLATFORM = darwin ]
    then
	# stat(1) format
	# 234881026 5304024 -rwxr-xr-x 1 kenj kenj 0 2016 "May  4 14:00:42 2011" "Apr 27 20:14:16 2011" "Apr 27 20:14:16 2011" "Apr 27 20:14:16 2011" 4096 8 0 441
	stat $1 2>&1 | $PCP_AWK_PROG '{ print $8 }'
    else
	# stat(1) format
	#   File: `441'
	#   Size: 2016      	Blocks: 8          IO Block: 4096   regular file
	# Device: 816h/2070d	Inode: 758237      Links: 1
	# Access: (0755/-rwxr-xr-x)  Uid: ( 1000/    kenj)   Gid: ( 1000/    kenj)
	# Access: 2011-05-09 06:52:58.000000000 +1000
	# Modify: 2011-02-27 14:42:30.000000000 +1100
	# Change: 2011-02-28 19:21:27.000000000 +1100
	stat $1 2>&1 | $PCP_AWK_PROG '$1 == "Size:"	{ print $2 }'
    fi
}

_filter()
{
    sed \
	-e 's/[0-9][0-9]:[0-9][0-9]:[0-9][0-9]\.[0-9][0-9][0-9]/TIMESTAMP/g'
}

_check()
{
    # expect 3 volumes, and all < 2^31 bytes in size
    #
    sts=0
    limit=2147483648
    nvol=`ls $1.? | wc -l | sed -e 's/ //g'`
    if [ $nvol -ne 3 ]
    then
	ls -l $1.?
	echo "Error: expecting 3 volumes, found $nvol"
	sts=1
    fi

    for vol in $1.?
    do
	size=`_size $vol`
	if [ -z "$size" ]
	then
	    stat $vol
	    echo "Error: cannot extract size for volume $vol"
	    sts=1
	elif [ "$size" -ge $limit ]
	then
	    ls -l $vol
	    echo "Error: size ($size) exceeds limit ($limit)"
	    sts=1
	fi
    done
    if [ $sts -eq 0 ]
    then
	echo "OK"
    else
	status=$sts
    fi
}

echo "metric sample.hordes.one { type -> 64 }" >$tmp.config
echo "metric sample.hordes.two { type -> 64 }" >>$tmp.config

# real QA test starts here
echo "rewrite and copy" | tee -a $seq.full
rm -f big2*
ls -l big1* >>$seq.full 2>&1
pminfo -d -a big1 >>$seq.full
pmlogrewrite -w -c $tmp.config big1 big2 2>&1 | _filter
ls -l big2* >>$seq.full 2>&1
pminfo -d -a big2 >>$seq.full
_check big2

echo | tee -a $seq.full
echo "rewrite in place" | tee -a $seq.full
rm -f big2*
for file in big1.*
do
    cp $file `echo $file | sed -e 's/big1/big2/'`
done
ls -l big2* >>$seq.full 2>&1
pminfo -d -a big2 >>$seq.full
pmlogrewrite -iw -c $tmp.config big2 2>&1 | _filter
ls -l big2* >>$seq.full 2>&1
pminfo -d -a big2 >>$seq.full
_check big2

# success, all done
exit
