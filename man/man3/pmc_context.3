'\"macro stdmacro
.\" Copyright (c) 2005 Silicon Graphics, Inc.  All Rights Reserved.
.\" 
.\" This program is free software; you can redistribute it and/or modify it
.\" under the terms of the GNU General Public License as published by the
.\" Free Software Foundation; either version 2 of the License, or (at your
.\" option) any later version.
.\" 
.\" This program is distributed in the hope that it will be useful, but
.\" WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
.\" or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
.\" for more details.
.\" 
.\" You should have received a copy of the GNU General Public License along
.\" with this program; if not, write to the Free Software Foundation, Inc.,
.\" 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
.ie \(.g \{\
.\" ... groff (hack for khelpcenter, man2html, etc.)
.TH PMC_CONTEXT 3 "SGI" "Performance Co-Pilot"
\}
.el \{\
.if \nX=0 .ds x} PMC_CONTEXT 3 "SGI" "Performance Co-Pilot"
.if \nX=1 .ds x} PMC_CONTEXT 3 "Performance Co-Pilot"
.if \nX=2 .ds x} PMC_CONTEXT 3 "" "\&"
.if \nX=3 .ds x} PMC_CONTEXT "" "" "\&"
.TH \*(x}
.rr X
\}
.SH NAME
\f3PMC_Context\f1 \- container for a PMAPI context and its metrics
.SH "C++ SYNOPSIS"
.ft 3
#include <pcp/pmc/Context.h>
.sp
CC ... \-lpcp_pmc \-lpcp 
.ft 1
.SH DESCRIPTION
A
.B PMC_Context
object is a container for a single 
.BR PMAPI (3)
context.  The object maintains a list of all the metric descriptors
.RB ( PMC_Desc ),
instance domains
.RB ( PMC_Indom )
and
metrics
.RB ( PMC_Metric )
using the context to minimize the duplication of these objects.
.SH "CONSTRUCTORS"
A
.B PMC_Context
object should be constructed through the
.B PMC_Group::use
interface.
.SH "DESCRIPTOR LOOKUP"
The metric and instance domain descriptors are cached by the
.B PMC_Context
object to reduce duplicate
.BR PMC_Desc (3)
and
.BR PMC_Indom (3)
objects and
.BR PMAPI (3)
calls required to create them.  Also the mapping from metrics names to 
.BR pmID s
is also maintained to avoid
.BR pmLookupName (3)
calls.
.TP 4
.B "int lookupDesc(const char *name, pmID& id);"
Search for the metric
.I name
in the name list and set 
.B id
to the known
.BR pmID .
If not found, use
.BR pmLookupName (3)
to get the mapping.  If this call fails, the
.BR PMAPI (3)
error code will be returned.
.TP
.B "int lookupDesc(const char *name, uint_t& desc, uint_t& indom);"
Find the index 
.I desc
and
.I indom
to the
.B PMC_Desc
object and the
.B PMC_Indom
object for the metric 
.IR name .
The indexes can then be used with 
.B PMC_Context::desc
and
.B PMC_Context::indom
to obtain references to the real objects.
The methods will return a
.BR PMAPI (3)
error code if the metric descriptor or instance domain could not be obtained.
.TP
.B "int lookupDesc(pmID pmid, uint_t& desc, uint_t& indom);"
Find the index 
.I desc
and
.I indom
to the
.B PMC_Desc
object and the
.B PMC_Indom
object for the metric
.IR pmid .
The indexes can then be used with 
.B PMC_Context::desc
and
.B PMC_Context::indom
to obtain references to the real objects.
The methods will return a
.BR PMAPI (3)
error code if the metric descriptor or instance domain could not be obtained.
.SH SEE ALSO
.BR PMAPI (3),
.BR PMC (3),
.BR PMC_Desc (3),
.BR PMC_Group (3),
.BR PMC_Indom (3),
.BR PMC_Metric (3),
.BR pmflush (3),
.BR pmLookupName (3)
and
.BR pmprintf (3).
.SH DIAGNOSTICS
Error messages are generated using
.BR pmprintf (3)
but are not flushed. It is the responsibility of the user to call
.BR pmflush (3)
to output any messages.
.PP
Additional diagnostics may be activated by adding 
.B DBG_TRACE_PMC
and
.B DBG_TRACE_OPTFETCH
to the global
.IR pmDebug .
