'\"macro stdmacro
.\" Copyright (c) 2005 Silicon Graphics, Inc.  All Rights Reserved.
.\" 
.\" This program is free software; you can redistribute it and/or modify it
.\" under the terms of the GNU General Public License as published by the
.\" Free Software Foundation; either version 2 of the License, or (at your
.\" option) any later version.
.\" 
.\" This program is distributed in the hope that it will be useful, but
.\" WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
.\" or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
.\" for more details.
.\" 
.\" You should have received a copy of the GNU General Public License along
.\" with this program; if not, write to the Free Software Foundation, Inc.,
.\" 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
.\" 
.\" Contact information: Silicon Graphics, Inc., 1500 Crittenden Lane,
.\" Mountain View, CA 94043, USA, or: http://www.sgi.com
.ie \(.g \{\
.\" ... groff (hack for khelpcenter, man2html, etc.)
.TH PMC_SOURCE 3 "SGI" "Performance Co-Pilot"
\}
.el \{\
.if \nX=0 .ds x} PMC_SOURCE 3 "SGI" "Performance Co-Pilot"
.if \nX=1 .ds x} PMC_SOURCE 3 "Performance Co-Pilot"
.if \nX=2 .ds x} PMC_SOURCE 3 "" "\&"
.if \nX=3 .ds x} PMC_SOURCE "" "" "\&"
.TH \*(x}
.rr X
\}
.SH NAME
\f3PMC_Source \f1 \- manages contexts created by all groups
.SH "C++ SYNOPSIS"
.ft 3
#include <pcp/pmc/Source.h>
.sp
CC ... \-lpcp_pmc \-lpcp 
.ft 1
.SH DESCRIPTION
The
.B PMC_Source
class maintains a unique list of all metric sources in use to minimize
the creation of new contexts (see
.BR pmNewContext (3))
when the context could have been duplicated (see
.BR pmDupContext (3)).
This also reduces the duplication of descriptions of each source.
.PP
In general, 
.B PMC
users should only need to access
.B PMC_Source
methods to obtain source descriptions for a
.BR PMC_Context (3)
object.  All context creation by the user should be handled through
.BR PMC_Group (3).
.SH "DESTRUCTOR"
.TP 4
.B "~PMC_Source();"
Destructor.
.SH "CONSTRUCTORS"
.TP 4
.B "static PMC_Source* getSource(int type, const char* source,"
.B "PMC_Bool matchHosts)"

This method will return a 
.B PMC_Source
object that represents a context of
.I type
to
.IR source .
The 
.B PMC_Source
object may be a new object if the
.I source
has not been previously requested. Memory management of the
.B PMC_Source
objects is handled by 
.BR PMC_Source .
If all
.BR PMC_Context (3)s
to the 
.B PMC_Source
have been deleted, the
.B PMC_Source
object will also be deleted.

The
.I matchHosts
flag controls the algorithm that is used to match hosts to archives.
If 
.I matchHosts
is equal to
.B PMC_false
then no attempt will be made by this method to match a host context to an
existing source context. A
.B PMC_Source
object will always be returned in this case, although the
.B PMC_Source::status
method may indicate that a context to 
.I source
failed.

If
.I matchHosts
is equal to
.BR PMC_true ,
host contexts will be matched to a pre-defined archive source collected from
that
.IR source .
If no archive sources for the
.I source
have been previous specified,
.B getSource
will return a NULL pointer.
.SH SEE ALSO
.BR PMAPI (3),
.BR PMC (3),
.BR PMC_Context (3),
.BR PMC_Group (3),
.BR pmDupContext (3),
.BR pmflush (3),
.BR pmNewContext (3)
and
.BR pmprintf (3).
.SH DIAGNOSTICS
Error messages are generated using
.BR pmprintf (3)
but are not flushed. It is the responsibility of the user to call
.BR pmflush (3)
to output any messages.
.PP
Additional diagnostics may be activated by adding 
.B DBG_TRACE_PMC
to the global
.IR pmDebug .
