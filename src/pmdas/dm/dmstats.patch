diff --git a/src/pmdas/dm/GNUmakefile b/src/pmdas/dm/GNUmakefile
index 284e511..75cba24 100644
--- a/src/pmdas/dm/GNUmakefile
+++ b/src/pmdas/dm/GNUmakefile
@@ -1,4 +1,4 @@
-#
+
 # Copyright (c) 2015 Red Hat.
 # 
 # This program is free software; you can redistribute it and/or modify it
@@ -15,11 +15,11 @@
 TOPDIR = ../../..
 include	$(TOPDIR)/src/include/builddefs
 
-CFILES		= pmda.c dmthin.c dmcache.c
-HFILES		= indom.h dmthin.h dmcache.h
+CFILES		= pmda.c dmthin.c dmcache.c dm.c
+HFILES		= indom.h dmthin.h dmcache.h dm.h
 CMDTARGET	= pmdadm
 
-LLDLIBS		= $(PCP_PMDALIB)
+LLDLIBS		= $(PCP_PMDALIB) -I /home/fumiya/lvm2/libdm -L /home/fumiya/lvm2/libdm/ioctl -ldevmapper
 
 IAM		= dm
 DOMAIN		= DM
@@ -38,11 +38,11 @@ default:	build-me
 include $(BUILDRULES)
 
 ifeq "$(TARGET_OS)" "linux"
-build-me: $(CMDTARGET) $(LIBTARGET)
+build-me: $(CMDTARGET) $(LIBTARGET) 
 
 install: default
 	$(INSTALL) -m 755 -d $(PMDADIR)
-	$(INSTALL) -m 644 root pmns.dmcache pmns.dmthin domain.h help $(PMDADIR)
+	$(INSTALL) -m 644 root pmns.dmcache pmns.dmthin pmns.dm domain.h help $(PMDADIR)
 	$(INSTALL) -m 755 Install Remove $(CMDTARGET) $(PMDADIR)
 	$(INSTALL) -m 644 dmthin.data_high_util.pmie $(PMIEDIR)/data_high_util
 	$(INSTALL) -m 644 dmthin.metadata_high_util.pmie $(PMIEDIR)/metadata_high_util
@@ -61,6 +61,7 @@ $(OBJECTS): domain.h
 domain.h: ../../pmns/stdpmid
 	$(DOMAIN_MAKERULE)
 
-pmda.o dmcache.o dmthin.o: indom.h
+pmda.o dmcache.o dmthin.o dm.o: indom.h
 pmda.o dmcache.o: dmcache.h
 pmda.o dmthin.o: dmthin.h
+pmda.o dm.o: dm.h 
diff --git a/src/pmdas/dm/Install b/src/pmdas/dm/Install
index adf6684..88a8650 100644
--- a/src/pmdas/dm/Install
+++ b/src/pmdas/dm/Install
@@ -19,7 +19,7 @@
 . $PCP_SHARE_DIR/lib/pmdaproc.sh
 
 iam=dm
-pmns_name="dmcache dmthin"
+pmns_name="dmcache dmthin dm"
 pmda_interface=4
 forced_restart=true	# for env vars
 
diff --git a/src/pmdas/dm/dm.c b/src/pmdas/dm/dm.c
new file mode 100644
index 0000000..2155193
--- /dev/null
+++ b/src/pmdas/dm/dm.c
@@ -0,0 +1,192 @@
+#include "pmapi.h"
+#include "impl.h"
+#include "pmda.h"
+
+#include "indom.h"
+#include "dm.h"
+
+#include <inttypes.h>
+
+#include <libdevmapper.h>
+
+int
+dm_stats_fetch(int item, struct dm_stats_counter *dmsc, pmAtomValue *atom)
+{
+	if (item < 0 || item >= NUM_DM_STATS_COUNTER)
+		return  PM_ERR_PMID;
+
+	switch(item) {
+		case DM_STATS_READS_COUNT:
+			atom->ull = dmsc->reads;
+			break;
+		case DM_STATS_READS_MERGED_COUNT:
+			atom->ull = dmsc->reads_merged;
+			break;
+		case DM_STATS_READ_SECTORS_COUNT:
+			atom->ull = dmsc->read_sectors;
+			break;
+		case DM_STATS_READ_NSECS:
+			atom->ull = dmsc->read_nsecs;
+			break;
+		case DM_STATS_WRITES_COUNT:
+			atom->ull = dmsc->writes;
+			break;
+		case DM_STATS_WRITES_MERGED_COUNT:
+			atom->ull = dmsc->writes_merged;
+			break;
+		case DM_STATS_WRITE_SECTORS_COUNT:
+			atom->ull = dmsc->write_sectors;
+			break;
+		case DM_STATS_WRITE_NSECS:
+			atom->ull = dmsc->write_nsecs;
+			break;
+		case DM_STATS_IO_IN_PROGRESS_COUNT:
+			atom->ull = dmsc->io_in_progress;
+			break;
+		case DM_STATS_IO_NSECS:
+			atom->ull = dmsc->io_nsecs;
+			break;
+		case DM_STATS_WEIGHTED_IO_NSECS:
+			atom->ull = dmsc->weighted_io_nsecs;
+			break;
+		case DM_STATS_TOTAL_READ_NSECS:
+			atom->ull = dmsc->total_read_nsecs;
+			break;
+		case DM_STATS_TOTAL_WRITE_NSECS:
+			atom->ull = dmsc->total_write_nsecs;
+			break;
+	}
+	return 1;
+}
+
+int 
+dm_refresh_stats_counter(const char *name, struct dm_stats_counter *dmsc)
+{
+	struct dm_stats *dms;
+	uint64_t reads = 0, reads_merged = 0, read_sectors = 0, read_nsecs = 0;
+	uint64_t writes = 0, writes_merged = 0, write_sectors = 0, write_nsecs = 0;
+	uint64_t io_in_progress = 0, io_nsecs = 0, weighted_io_nsecs = 0, total_read_nsecs = 0, total_write_nsecs = 0;
+
+	if (!(dms = dm_stats_create(DM_STATS_ALL_PROGRAMS)))
+		goto bad;
+
+	if (!dm_stats_bind_name(dms, name))
+		goto bad;
+
+	if (!dm_stats_populate(dms, DM_STATS_ALL_PROGRAMS, DM_STATS_REGIONS_ALL))
+		goto bad;
+
+	dm_stats_foreach_region(dms) {
+		reads              
+			+= dm_stats_get_counter(dms, DM_STATS_READS_COUNT, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		reads_merged
+			+= dm_stats_get_counter(dms, DM_STATS_READS_MERGED_COUNT, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		read_sectors
+			+= dm_stats_get_counter(dms, DM_STATS_READ_SECTORS_COUNT, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		read_nsecs
+			+= dm_stats_get_counter(dms, DM_STATS_READ_NSECS, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		writes
+			+= dm_stats_get_counter(dms, DM_STATS_WRITES_COUNT, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		writes_merged      
+			+= dm_stats_get_counter(dms, DM_STATS_WRITES_MERGED_COUNT, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		write_sectors      
+			+= dm_stats_get_counter(dms, DM_STATS_WRITE_SECTORS_COUNT, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		write_nsecs        
+			+= dm_stats_get_counter(dms, DM_STATS_WRITE_NSECS, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		io_in_progress     
+			+= dm_stats_get_counter(dms, DM_STATS_IO_IN_PROGRESS_COUNT, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		io_nsecs           
+			+= dm_stats_get_counter(dms, DM_STATS_IO_NSECS, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		weighted_io_nsecs  
+			+= dm_stats_get_counter(dms, DM_STATS_WEIGHTED_IO_NSECS, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		total_read_nsecs   
+			+= dm_stats_get_counter(dms, DM_STATS_TOTAL_READ_NSECS, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+		total_write_nsecs  
+			+= dm_stats_get_counter(dms, DM_STATS_TOTAL_WRITE_NSECS, DM_STATS_REGION_CURRENT, DM_STATS_AREA_CURRENT);
+	}
+	dmsc->reads             = reads;
+	dmsc->reads_merged      = reads_merged;
+	dmsc->read_sectors      = read_sectors;
+	dmsc->read_nsecs        = read_nsecs;
+	dmsc->writes            = writes;
+	dmsc->writes_merged     = writes_merged;
+	dmsc->write_sectors     = write_sectors;
+	dmsc->write_nsecs       = write_nsecs;
+	dmsc->io_in_progress    = io_in_progress;
+	dmsc->io_nsecs          = io_nsecs;
+	dmsc->weighted_io_nsecs = weighted_io_nsecs;
+	dmsc->total_read_nsecs  = total_read_nsecs;
+	dmsc->total_write_nsecs = total_write_nsecs;
+
+	dm_stats_destroy(dms);
+
+	return 0;
+
+bad:
+	dmsc->reads             = 0; 
+	dmsc->reads_merged      = 0; 
+	dmsc->read_sectors      = 0; 
+	dmsc->read_nsecs        = 0; 
+	dmsc->writes            = 0; 
+	dmsc->writes_merged     = 0; 
+	dmsc->write_sectors     = 0;
+	dmsc->write_nsecs       = 0; 
+	dmsc->io_in_progress    = 0; 
+	dmsc->io_nsecs          = 0; 
+	dmsc->weighted_io_nsecs = 0; 
+	dmsc->total_read_nsecs  = 0; 
+	dmsc->total_write_nsecs = 0; 
+
+	return 0;
+}
+
+int 
+dm_stats_instance_refresh(void)
+{
+	struct dm_stats_counter *dmsc;
+	struct dm_task *dmt;
+	struct dm_names *names;
+	unsigned next = 0;
+	int sts;
+	pmInDom indom = dm_indom(DM_STATS_INDOM);
+
+	pmdaCacheOp(indom, PMDA_CACHE_INACTIVE);
+
+	if (!(dmt = dm_task_create(DM_DEVICE_LIST)))
+		return 0;
+
+	if (!dm_task_enable_checks(dmt))
+		goto out;
+
+	if (!dm_task_run(dmt))
+		goto out;
+
+	if(!(names = dm_task_get_names(dmt)))
+		goto out;
+
+
+	do {
+		names = (struct dm_names*)((char *) names + next);
+		sts = pmdaCacheLookupName(indom, names->name, NULL, (void **)&dmsc);
+		if (sts == PM_ERR_INST || (sts >= 0 && dmsc == NULL)) {
+			dmsc = calloc(1, sizeof(*dmsc));
+			if (dmsc == NULL)
+				return PM_ERR_AGAIN;
+		}
+		pmdaCacheStore(indom, PMDA_CACHE_ADD, names->name, (void *)dmsc);
+		next = names->next;
+	} while(next);
+
+
+	dm_task_destroy(dmt);
+	return 0;
+
+out:
+	dm_task_destroy(dmt);
+	return 0;
+}
+
+void 
+dm_stats_setup(void)
+{
+}
diff --git a/src/pmdas/dm/dm.h b/src/pmdas/dm/dm.h
new file mode 100644
index 0000000..ee738a4
--- /dev/null
+++ b/src/pmdas/dm/dm.h
@@ -0,0 +1,75 @@
+#ifndef DM_H
+#define DM_H
+
+typedef enum {
+	DM_STATS_RD_MERGES_PER_SEC,
+	DM_STATS_WR_MERGES_PER_SEC,
+	DM_STATS_READS_PER_SEC,
+	DM_STATS_WRITES_PER_SEC,
+	DM_STATS_READ_SECTORS_PER_SEC,
+	DM_STATS_WRITE_SECTORS_PER_SEC,
+	DM_STATS_AVERAGE_REQUEST_SIZE,
+	DM_STATS_AVERAGE_QUEUE_SIZE,
+	DM_STATS_AVERAGE_WAIT_TIME,
+	DM_STATS_AVERAGE_RD_WAIT_TIME,
+	DM_STATS_AVERAGE_WR_WAIT_TIME,
+	DM_STATS_SERVICE_TIME,
+	DM_STATS_THROUGHPUT,
+	DM_STATS_UTILIZATION,
+	DM_STATS_NR_METRICS,
+	NUM_DM_STATS
+} dm_stats_metric_t;
+
+
+typedef enum {
+	DM_STATS_READS_COUNT,
+	DM_STATS_READS_MERGED_COUNT,
+	DM_STATS_READ_SECTORS_COUNT,
+	DM_STATS_READ_NSECS,
+	DM_STATS_WRITES_COUNT,
+	DM_STATS_WRITES_MERGED_COUNT,
+	DM_STATS_WRITE_SECTORS_COUNT,
+	DM_STATS_WRITE_NSECS,
+	DM_STATS_IO_IN_PROGRESS_COUNT,
+	DM_STATS_IO_NSECS,
+	DM_STATS_WEIGHTED_IO_NSECS,
+	DM_STATS_TOTAL_READ_NSECS,
+	DM_STATS_TOTAL_WRITE_NSECS,
+	DM_STATS_NR_COUNTERS,
+	NUM_DM_STATS_COUNTER
+} dm_stats_counter_t;
+
+
+struct dm_pcp_stats {
+	uint64_t test_0;
+	uint64_t test_1;
+	char *dname;
+	uint64_t tt;
+};
+
+struct dm_stats_counter {
+	uint64_t reads;		    /* Num reads completed */
+	uint64_t reads_merged;	    /* Num reads merged */
+	uint64_t read_sectors;	    /* Num sectors read */
+	uint64_t read_nsecs;	    /* Num milliseconds spent reading */
+	uint64_t writes;	    /* Num writes completed */
+	uint64_t writes_merged;	    /* Num writes merged */
+	uint64_t write_sectors;	    /* Num sectors written */
+	uint64_t write_nsecs;	    /* Num milliseconds spent writing */
+	uint64_t io_in_progress;    /* Num I/Os currently in progress */
+	uint64_t io_nsecs;	    /* Num milliseconds spent doing I/Os */
+	uint64_t weighted_io_nsecs; /* Weighted num milliseconds doing I/Os */
+	uint64_t total_read_nsecs;  /* Total time spent reading in milliseconds */
+	uint64_t total_write_nsecs; /* Total time spent writing in milliseconds */
+	struct dm_histogram *histogram; /* Histogram. */
+};
+
+struct dm_stats_metric {
+};
+
+extern int dm_stats_fetch(int, struct dm_stats_counter *, pmAtomValue *);
+extern int dm_stats_instance_refresh(void);
+extern int dm_fetch_refresh_stats_counter(const char *, struct dm_stats_counter *);
+extern void dm_stats_setup(void);
+
+#endif
diff --git a/src/pmdas/dm/dmcache.c b/src/pmdas/dm/dmcache.c
index 476e97f..56d3c3e 100644
--- a/src/pmdas/dm/dmcache.c
+++ b/src/pmdas/dm/dmcache.c
@@ -222,7 +222,7 @@ dm_cache_instance_refresh(void)
 void
 dm_cache_setup(void)
 {
-    static char dmcache_command[] = "dmsetup status --target cache";
+    static char dmcache_command[] = "dmsetup status --target dmcache";
     char *env_command;
 
     /* allow override at startup for QA testing */
diff --git a/src/pmdas/dm/indom.h b/src/pmdas/dm/indom.h
index 17765e0..da317ce 100644
--- a/src/pmdas/dm/indom.h
+++ b/src/pmdas/dm/indom.h
@@ -21,6 +21,7 @@ enum {
     DM_CACHE_INDOM = 0,		/* 0 -- Caches */
     DM_THIN_POOL_INDOM = 1,	/* 1 -- Thin Pools */
     DM_THIN_VOL_INDOM = 2,	/* 2 -- Thin Volumes */
+    DM_STATS_INDOM = 3,
     NUM_INDOMS
 };
 
diff --git a/src/pmdas/dm/pmda.c b/src/pmdas/dm/pmda.c
index 70778e7..ce845da 100644
--- a/src/pmdas/dm/pmda.c
+++ b/src/pmdas/dm/pmda.c
@@ -22,11 +22,13 @@
 #include "domain.h"
 #include "dmthin.h"
 #include "dmcache.h"
+#include "dm.h"
 
 enum {
     CLUSTER_CACHE = 0,		/* DM-Cache Caches */
     CLUSTER_POOL = 1,		/* DM-Thin Pools */
     CLUSTER_VOL = 2,		/* DM-Thin Volumes */
+    CLUSTER_DM_COUNTER = 3,
     NUM_CLUSTERS
 };
 
@@ -154,12 +156,66 @@ static pmdaMetric metrictable[] = {
         PMDA_PMID(CLUSTER_VOL, VOL_HIGHEST_MAPPED_SECTORS),
         PM_TYPE_U64, DM_THIN_VOL_INDOM, PM_SEM_INSTANT,
         PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) }, },
+    /* DM_STATS Basic Counters*/
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_READS_COUNT),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_COUNTER,
+        PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_READS_MERGED_COUNT),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_COUNTER,
+        PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_READ_SECTORS_COUNT),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_COUNTER,
+        PMDA_PMUNITS(1,0,1,PM_SPACE_BYTE,0,PM_COUNT_ONE) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_READ_NSECS),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_INSTANT,
+        PMDA_PMUNITS(0,1,0,0,PM_TIME_NSEC,0) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_WRITES_COUNT),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_COUNTER,
+        PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_WRITES_MERGED_COUNT),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_COUNTER,
+        PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_WRITE_SECTORS_COUNT),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_COUNTER,
+        PMDA_PMUNITS(1,0,1,PM_SPACE_BYTE,0,PM_COUNT_ONE) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_WRITE_NSECS),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_INSTANT,
+        PMDA_PMUNITS(0,1,0,0,PM_TIME_NSEC,0) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_IO_IN_PROGRESS_COUNT),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_COUNTER,
+        PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_IO_NSECS),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_INSTANT,
+        PMDA_PMUNITS(0,1,0,0,PM_TIME_NSEC,0) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_WEIGHTED_IO_NSECS),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_INSTANT,
+        PMDA_PMUNITS(0,0,0,0,0,0) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_TOTAL_READ_NSECS),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_INSTANT,
+        PMDA_PMUNITS(0,1,0,0,PM_TIME_NSEC,0) }, },
+    { .m_desc = {
+        PMDA_PMID(CLUSTER_DM_COUNTER, DM_STATS_TOTAL_WRITE_NSECS),
+        PM_TYPE_U64, DM_STATS_INDOM, PM_SEM_INSTANT,
+        PMDA_PMUNITS(0,1,0,0,PM_TIME_NSEC,0) }, },
 };
 
 static pmdaIndom indomtable[] = {
     { .it_indom = DM_CACHE_INDOM }, 
     { .it_indom = DM_THIN_POOL_INDOM },
     { .it_indom = DM_THIN_VOL_INDOM },
+    { .it_indom = DM_STATS_INDOM},
 };
 
 pmInDom
@@ -174,6 +230,7 @@ dm_instance(pmInDom indom, int inst, char *name, __pmInResult **result, pmdaExt
     dm_cache_instance_refresh();
     dm_thin_pool_instance_refresh();
     dm_thin_vol_instance_refresh();
+    dm_stats_instance_refresh();
     return pmdaInstance(indom, inst, name, result, pmda);
 }
 
@@ -238,6 +295,26 @@ dm_fetch_refresh(pmdaExt *pmda, int *need_refresh)
                 dm_refresh_thin_vol(name, vol);
         }
     }
+
+    if (need_refresh[CLUSTER_DM_COUNTER]) {
+        struct dm_stats_counter *dmsc;
+
+        if ((sts = dm_stats_instance_refresh()) < 0)
+	    return sts;
+
+        indom = dm_indom(DM_STATS_INDOM);
+
+        for (pmdaCacheOp(indom, PMDA_CACHE_WALK_REWIND);;) {
+	    if ((inst = pmdaCacheOp(indom, PMDA_CACHE_WALK_NEXT)) < 0)
+	        break;
+	    if (!pmdaCacheLookup(indom, inst, &name, (void **)&dmsc) || !dmsc)
+	        continue;
+            if (need_refresh[CLUSTER_DM_COUNTER]) {
+                dm_refresh_stats_counter(name, dmsc);
+	    }
+        }
+     }
+	
     return sts;
 }
 
@@ -268,6 +345,7 @@ dm_fetchCallBack(pmdaMetric *mdesc, unsigned int inst, pmAtomValue *atom)
     struct cache_stats *cache;
     struct pool_stats *pool;
     struct vol_stats *vol;
+    struct dm_stats_counter *dmsc;
     int sts;
 
     switch (idp->cluster) {
@@ -289,6 +367,12 @@ dm_fetchCallBack(pmdaMetric *mdesc, unsigned int inst, pmAtomValue *atom)
 	        return sts;
 	    return dm_thin_vol_fetch(idp->item, vol, atom);
 
+	case CLUSTER_DM_COUNTER:
+	    sts = pmdaCacheLookup(dm_indom(DM_STATS_INDOM), inst, NULL, (void**)&dmsc);
+	    if (sts < 0)
+	        return sts;
+	    return dm_stats_fetch(idp->item, dmsc, atom);
+
         default: /* unknown cluster */
 	    return PM_ERR_PMID;
     }
@@ -305,6 +389,7 @@ dm_init(pmdaInterface *dp)
     /* Check for environment variables allowing test injection */
     dm_cache_setup();
     dm_thin_setup();
+    dm_stats_setup();
 
     int	nindoms = sizeof(indomtable)/sizeof(indomtable[0]);
     int	nmetrics = sizeof(metrictable)/sizeof(metrictable[0]);
diff --git a/src/pmdas/dm/pmns.dm b/src/pmdas/dm/pmns.dm
new file mode 100644
index 0000000..65fdf21
--- /dev/null
+++ b/src/pmdas/dm/pmns.dm
@@ -0,0 +1,16 @@
+dm {
+	read_count	    DM:3:0
+	reads_merged_count  DM:3:1
+	read_sector_count   DM:3:2
+	read_time           DM:3:3
+	write_count	    DM:3:4
+	writes_merged_count DM:3:5
+	write_sector_count  DM:3:6
+	writes_time         DM:3:7
+	in_progress_count   DM:3:8
+	io_ticks            DM:3:9
+	queue_ticks         DM:3:10
+	read_ticks          DM:3:11
+	write_ticks         DM:3:12
+
+}
diff --git a/src/pmdas/dm/root b/src/pmdas/dm/root
index 76595f4..3a1fff6 100644
--- a/src/pmdas/dm/root
+++ b/src/pmdas/dm/root
@@ -11,7 +11,9 @@
 root {
     dmcache
     dmthin
+    dm
 }
 
 #include "pmns.dmcache"
 #include "pmns.dmthin"
+#include "pmns.dm"
