#! /bin/sh
#
# Copyright (c) 1997-2003 Silicon Graphics, Inc.  All Rights Reserved.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 
# Contact information: Silicon Graphics, Inc., 1500 Crittenden Lane,
# Mountain View, CA 94043, USA, or: http://www.sgi.com
#
# Install the cisco PMDA and/or PMNS
#

# Get standard environment
. /etc/pcp.env

# Get the common procedures and variable assignments
#
. $PCP_SHARE_DIR/lib/pmdaproc.sh

# The name of the PMDA
#
iam=cisco

# Using libpcp_pmda.so.2 and PMDA_INTERFACE_2
#
pmda_interface=2

# Do it
#
pmdaSetup

check_delay=20
pollrate=120		# poll each Cisco interface once every 120 seconds
			# -- change this if desired

# special cisco PMDA args

if $do_pmda
then
    args="-r $pollrate"
    default="wanptg"
    while true
    do
	no_host=true
	while $no_host
	do
	    echo
	    $PCP_ECHO_PROG $PCP_ECHO_N "Cisco hostname or IP address? [return to quit Cisco selection] ""$PCP_ECHO_C"
	    read host
	    [ "X$host" = X ] && break
	    echo '
A username and/or user-level password may be required for the Cisco
"show interface" command.
    If you are unsure, try the command
	$ telnet '$host'
    and if the prompt "Username:" appears, then a username is required,
    and if the prompt "Password:" appears, a user-level password is required,
    otherwise respond with an empty line for the next two questions.
'
	    $PCP_ECHO_PROG $PCP_ECHO_N "Cisco username? ""$PCP_ECHO_C"
	    read username
	    userarg=""
	    [ "X$username" != X ] && userarg="-U$username"
	    $PCP_ECHO_PROG $PCP_ECHO_N "User-level Cisco password? ""$PCP_ECHO_C"
	    read passwd
	    passarg=""
	    [ "X$passwd" != X ] && passarg="-P$passwd"
	    echo "Probing Cisco for list of interfaces ..."
	    for try in 1 2 3
	    do
		intf=`./probe $userarg $passarg $host 2>$tmp.err`
		[ ! -z "$intf" ] && break
		sleep 2
	    done
	    if [ -z "$intf" ]
	    then
		echo '
There appears to be a problem ... after three attempts could not get
interfaces.  Output at the last attempt was:'
		sed -e 's/^/    /' <$tmp.err
		echo '
You may wish to try the following commands to identify the configured
interfaces for this Cisco.
	$ telnet '$host'
	....> terminal length 0
	....> show interface
	....> quit
'
	    else
		no_host=false
	    fi
	done
	[ "X$host" = X ] && break

	if [ -z "$username" ]
	then
	    login=""
	else
	    login="@$username"
	fi
	[ ! -z "$passwd" ] && login="$login?$passwd"

	echo '
Enter interfaces to monitor, one per line in the format tX where "t" is
a type and one of "e" (Ethernet), "E" (FastEthernet), "f" (Fddi), "s"
(Serial), "a" (ATM), "B" (ISDN BRI) or "h" (HSSC) and "X" is an
interface identifier which is either an integer (e.g.  4000 Series
routers) or two integers separated by a slash (e.g. 7000 Series
routers).'

	while true
	do
	    echo
	    echo 'The currently unselected interfaces for the Cisco "'$host'" are:'
	    echo "$intf" | fmt | sed -e 's/^/    /'
	    echo 'Enter "*" to select all, "quit" to terminate selections for this Cisco.'

	    first=`echo "$intf" | sed -e 's/ .*//'`
	    [ -z "$first" ] && first=quit
	    $PCP_ECHO_PROG $PCP_ECHO_N "Interface? [$first] ""$PCP_ECHO_C"
	    read ans
	    [ "X$ans" = Xquit ] && break
	    if [ "X$ans" = "X*" ]
	    then
		# do them all
		for ans in `echo "$intf"`
		do
		    args="$args $host:$ans$login"
		    login=''
		done
		break
	    fi
	    [ -z "$ans" ] && ans="$first"
	    if echo " $intf" | grep " $ans" >/dev/null
	    then
		sed_ans=`echo $ans | sed -e 's;/;\\\\/;g'`
		intf=`echo " $intf" | sed -e "s/ $sed_ans//" -e 's/^ //'`
	    else
		echo "Warning: $ans is not in the list, I hope you know what you're doing"
	    fi
	    args="$args $host:$ans$login"
	    login=''
	    [ -z "$intf" ] && break
	done
    done
fi

pmdaInstall

exit 0
