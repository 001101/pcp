We welcome your contributions to the Performance Co-Pilot project!

Our preferred method of exchanging code, documentation, tests and new
ideas is via git.  To participate, create a cloned git tree using a
public git hosting service (e.g. github) or an account can be created
for you on oss.sgi.com or sourceware.org if you commit regularly.
Whenever you're ready, send mail to the list with details of the code
and its location.

Patches are fine too - send 'em through to the list at any time - even
just ideas, pseudo-code, etc - we've found it is often a good idea to
seek early feedback, particularly when modelling the metrics you'll be
exporting from any new PMDAs you might be writing.


Philosophy
==========

PCP development has a long tradition of focussing on automated testing.

New tests should be added to the testsuite with new code.  This is not
a hard requirement when sending out patches or git commits, however,
particularly as a new contributor.  Someone else will work with you to
introduce an appropriate level of testing to exercise your fix or new
code, and that will end up being committed along with your new changes.

For the more practiced, regular PCP committers: testing is assumed to
have been done for all commits - both regression testing using all of
the existing tests, and addition of new tests to exercise changes.  We
do not enforce this in any way, we use an open honesty system - it is
respectful of others and common courtesy to not force your peers to do
testing on your behalf.  Always, be practical - some changes are very
difficult to test automatically, or they might involve build-system,
configuration or documentation changes not requiring tests, of course.

For the very practiced, life members of club PCP: please help out in
terms of getting new contributors moving with their patches - writing
tests with them, giving feedback, and merging their code quickly.  We
aim to have new PMDA or monitoring tool contributions included in the
release immediately following the first arrival of code.  Also ensure
attribution of other contributors code is handled correctly, when you
git-commit.

Above all, have fun!  If you are not having fun, stop, and reconsider
your life -- take time away, you can always come back later; PCP will
still be here if you choose to return to it later.


Conventions
===========

Add permanent diagnostics to any code of middling-to-high complexity.
The convention is to test the pmDebug variable (from libpcp), which is
supported by every tool via the -D/--debug option - see pmdbg(1) for
details, and see also the many examples of its use in existing code.

Use the same coding style used in the code surrounding your changes,
creativity is unhelpful in this regard.


Practicalities
==============

Refer to the qa/README file for details on using the testsuite locally.
When writing new tests, bear in mind that other people will be running
those tests *alot*.  An ideal test is one that:

- Is small - several small tests trump one big test
  (allowing someone else debugging a test failure to quickly get their
  head around what the test does)

- Runs in as short an amount of time as possible
  (allowing someone debugging a failure to iterate quickly through any
  ideas they have while working on the fix)

- Uses the same style as all the other tests in the "qa" directory
  (other people will be debugging tests you write and you may need to
   debug other peoples tests as well - sticking to the same script is
   universally helpful)

- Is portable, testing as many platforms as possible:
  o  use pmdasample rather than a pmda<kernel> metric;
  o  use archives for exercising exact behaviour of monitor tools;
  o  watch out for differences in output between system utilities;
  o  before running, test for situations where it cannot run - such as
     unsupported platforms/configurations - use _notrun() here.

