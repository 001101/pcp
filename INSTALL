== INSTALL ==

A. Linux Installation (rpm, deb)
B. Mac OS X Installation
C. Windows Installation (mingw)
D. Building from source
E. Post-install steps

This document describes how to configure and build the open source PCP
("pcp") package from source, and how to install and finally run it.


== A. Linux Installation

If you are using Debian, or a Debian-based distribution like Ubuntu,
PCP is included in the distribution (as of early 2008).  Run:
	# apt-get install pcp
If you are using a RPM based distribution and have the binary rpm:
	# rpm -Uvh pcp-*.rpm
... and skip to the final section (below) - "Post-install steps".


== B. Mac OS X Installation

The only unusual step in installing PCP on Mac OS X is the additional
dependency on the developer tools (XCode package).  The specific need
PCP has is to have a C preprocessor available for managing the metric
namespace, which on Mac OS X is a frontend to gcc and not installed by
default.

Once this is installed, installing PCP from the DMG file is as simple
as clicking on the icon in a Finder window, and following the prompts
from the installer.


== C. Windows Installation

PCP requires an open source build environment, and runtime.  Initially
this was done using Cygwin, but limitations of using that platform for
building a low-level toolkit like PCP ultimately led to the need to
switch to using a native Windows compiler - MinGW was chosen, as this
compiler supports several things we need:
- Direct access to the Win32 API (for extracting performance data from
  the Windows kernel).
- Support for runtime loading and unloading of DLLs, for DSO agents.
- It's freely available, using an open source license compatilble with
  those used in PCP (GPL and LGPL).
- Qt supports this compiler for open source builds, so graphical tools
  like kmchart can run natively on PCP when built with this compiler.

However, MinGW is a compiler only, and PCP also has a need for a POSIX
shell, POSIX utilities, and Perl at both build and runtime.  So, we've
got several dependencies we need to meet as follows:

- Strawberry Perl (http://strawberryperl.com)
  This package provide a Perl runtime, Perl development environment and
  a C development environment (incl. MinGW compiler and Win32 headers).
* Download and install this to: C:\Toolkit

- Minimal SYStem (http://mingw.org/) and MSYS Developers ToolKit
  This is a minimal runtime environment to satisfy many of the remaining
  PCP needs for UNIX-like utilities.  Note: we only need to install MSYS
  and msysDTK here, not MinGW, as we already installed that with Perl.
* Download and install these both to: C:\Toolkit\sh

- QT (http://trolltech.com/qt)
  This is the cross-platform build environment for GUI applications like
  kmchart.  While not needed during a PCP build, you'll very likely want
  to use kmchart with PCP, so let's install it now with everything else.
* Download and install this to: C:\Toolkit\qt
  (when prompted for path to MinGW, use C:Toolkit\c)

Now, configure this environment as follows:
- Add to you PATH environment variable - using a "cmd.exe" console:
  (Note: the direction of the slashes is critical!)
  set PATH=%PATH%;C:/Toolkit/c/bin
  set PATH=%PATH%;C:/Toolkit/qt/bin
  set PATH=%PATH%;C:/Toolkit/sh/bin
  set PATH=%PATH%;C:/Toolkit/sh/local/bin
  set PATH=%PATH%;C:/Toolkit/perl/bin
  set PATH=%PATH%;C:/Toolkit/NSIS
  set QT_RELEASE=release
  set QTDIR=C:/Toolkit/qt
  set PCP_DIR=C:/Toolkit/sh

- Unfortunately, we're not done yet.  There are a handful of tools we're
  still missing that PCP requires...

  The msysDTK is missing some pieces.  We need bison, flex, and the GNU
  regular expression development kit (regex).  These can be downloaded
  from the GnuWin32 project (http://gnuwin32.sourceforge.net).
* Download and install these to: C:\Toolkit\sh\local

- But wait, there's more.  We're using the Nullsoft Scriptable Install
  System (which Qt also uses) to build the PCP installer/uninstaller
  for Windows (http://nsis.sourceforge.net).
* Download and install these to: C:\Toolkit\NSIS

- You're done.  Have a beer.  You'll need it to get through a build.


== D. Building from source

1. Configure, build and install the package

   The pcp package uses autoconf/configure and expects a GNU build
   environment (your platform must at least have both autoconf and gmake). 
   
   If you just want to spin a .RPM, .DEB, .DMG, .EXE and/or tar
   file, use the Makepkgs script in the top level directory.
   This will configure and build the package for your platform and
   leave binary and src packages in the build/<pkg-type> directory.
   It will also leave a binary tar file in the build/tar directory,
   and a source tar file in the build directory.

       $ ./Makepkgs -verbose

2. If you want to build the package and install it manually, use the
   following steps:

       $ make
       $ su root
       # make install

   Note 1: that there are so many "install" variants out there that we
   wrote our own script (see "install-sh" in the top level directory),
   which works on every platform supported by PCP.
   Note 2: the Windows build is particularly involved to setup, this
   is primarily due to build tools not being available by default on
   that platform.  See the platform notes earlier to correctly setup
   your environment before attempting to build from source.


== E. Post-install steps

   You will need to start the PCP Collection Daemon (PMCD), as root:

   Linux:
   # /etc/init.d/pcp start
   Mac OS X:
   /Library/StartupItems/pcp/pcp start
   Windows:
   $PCP_DIR/etc/pcp start

   Once you have started the PMCD daemon, you can list all performance
   metrics using the pminfo(1) command, E.g.

   # pminfo -fmdt   (you don't have to be root for this, but you may need to
		     type rehash so your shell finds the pminfo command).

   If you are writing scripts, you may find the output from pmprobe(1)
   easier to parse than that for pminfo(1). There are numerous other
   PCP client tools included.

   PCP can be configured to automatically log certain performance metrics
   for one or more hosts. The scripts to do this are documented in
   pmlogger_check(1). By default this facility is not enabled. If you want
   to use it, you need to

   # determine which metrics to log and how often you need them
   # edit /var/pcp/config/pmlogger/control
   # edit /var/pcp/config/pmlogger/config.default  (and any others in same dir)
   # as root, "crontab -e" and add something like:

   # -- typical PCP log management crontab entries
   # daily processing of archive logs
   10      0       *       *       *       $PCP_BINADM_DIR/pmlogger_daily
   #
   # every 30 minutes, check pmlogger instances are running
   25,40   *       *       *       *       $PCP_BINADM_DIR/pmlogger_check
   #
   # every 30 minutes, check pmie instances are running
   5,55    *       *       *       *       $PCP_BINADM_DIR/pmie_check


   The pmie (Performance Metrics Interfence Engine) daemon is _not_
   configured to start by default. To enable it, you may want to (on
   Linux platforms with chkconfig).

   # su root
   # chkconfig pmie on
   # edit the pmie control file (usually below /var/pcp/config/pmie)
   # edit the config file (usually /var/pcp/config/pmie/config.default)
   # set up cron scripts similar to those for pmlogger (see above)


   Configure some optional Performance Metrics Domain Agents (PMDAs)

   The default installation gives you the metrics for cpu, per-process,
   file system, swap, network, disk, memory, interrupts, nfs/rpc and
   others. These metrics are handled using the platform PMDA - namely
   pmda_linux.so (Linux), pmda_darwin.dylib (Mac), or pmda_windows.dll
   (Windows). It also gives you the PMCD PMDA, which contains metrics
   that monitor PCP itself.

   There are many other optional PMDAs that you can configure, depending
   on which performance metrics you need to monitor, as follows:
   Note: $PCP_PMDAS_DIR is normally /var/pcp/pmdas, see pcp.conf(4).

   Web Server metrics

   # su root
   # cd $PCP_PMDAS_DIR/apache  (i.e. cd /var/pcp/pmdas/apache)
   # ./Install
   # Check everything is working OK
   # pminfo -fmdt apache

   Other PMDAs in the pcp package include:

     apache - monitor apache web server stats
     cisco - monitor Cisco router stats
     mailq - monitor the mail queue
     mounts - keep track of mounted file systems
     news - experimental ascii protocol
     process - keep an eye on critical processes/daemons
     roomtemp - monitor room temp (needs suitable probe)
     sendmail - monitor sendmail statistics
     shping - ping critical system services
     trace - for instrumenting arbitrary applications, see pmtrace(1)
     txmon - transaction and QOS monitoring
     news - monitor news traffic
     sample - for testing
     simple - example src code if you want to write a new PMDA
     trivial - even easier src code for a new PMDA.

   The procedure for configuring all of these is to change to the
   directory for the PMDA (usually below /var/lib/pcp/pmdas), and then
   run the ./Install script found therein. None of these PMDAs are
   configured by default - you choose the PMDAs you need and run the
   Install script.

