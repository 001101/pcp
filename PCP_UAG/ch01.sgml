<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1997, v.4001
<!DOCTYPE SGIDOCBK PUBLIC "-//Silicon Graphics, Inc.//DTD DocBook V2.3-based Subset V1.5//EN" [
<!ENTITY disclaimer.sgml SYSTEM "frontmatter/disclaimer.sgml">
<!ENTITY o3000 SYSTEM "online/o3000.gif" NDATA gif>
<!ENTITY figure5y SYSTEM "online/figure5y.gif" NDATA gif>
<!ENTITY figure5x SYSTEM "online/figure5x.gif" NDATA gif>
<!ENTITY mpivis SYSTEM "online/mpivis.gif" NDATA gif>
<!ENTITY oview-tool.sgml SYSTEM "oview-tool.sgml">
<!ENTITY glossary.sgml SYSTEM "glossary.sgml">
<!ENTITY chap09.misc.sgml SYSTEM "chap09.misc.sgml">
<!ENTITY chap08.pixie.sgml SYSTEM "chap08.pixie.sgml">
<!ENTITY chap07.prof.sgml SYSTEM "chap07.prof.sgml">
<!ENTITY chap06.ssrun.sgml SYSTEM "chap06.ssrun.sgml">
<!ENTITY chap05.machuse.sgml SYSTEM "chap05.machuse.sgml">
<!ENTITY chap04.exptypes.sgml SYSTEM "chap04.exptypes.sgml">
<!ENTITY chap03.ftut.sgml SYSTEM "chap03.ftut.sgml">
<!ENTITY chap02.ctut.sgml SYSTEM "chap02.ctut.sgml">
<!ENTITY chap01.intro.sgml SYSTEM "chap01.intro.sgml">
<!ENTITY whentouseidmap.sgml SYSTEM "whentouseidmap.sgml">
<!ENTITY nfsintro.sgml SYSTEM "nfsintro.sgml">
<!ENTITY idmapping.sgml SYSTEM "idmapping.sgml">
<!ENTITY chapB.sgml SYSTEM "chapB.sgml">
<!ENTITY chapC.sgml SYSTEM "chapC.sgml">
<!ENTITY chapD.sgml SYSTEM "chapD.sgml">
<!ENTITY chapE.sgml SYSTEM "chapE.sgml">
<!ENTITY chapF.sgml SYSTEM "chapF.sgml">
<!ENTITY chapA.sgml SYSTEM "chapA.sgml">
<!ENTITY chap01.sgml SYSTEM "chap01.sgml">
<!ENTITY chap02.sgml SYSTEM "chap02.sgml">
<!ENTITY chap03.sgml SYSTEM "chap03.sgml">
<!ENTITY chap04.sgml SYSTEM "chap04.sgml">
<!ENTITY a12231 SYSTEM "online/a12231.gif" NDATA gif>
<!ENTITY a12129 SYSTEM "online/a12129.gif" NDATA gif>
<!ENTITY a11363 SYSTEM "online/a11363.gif" NDATA gif>
<!ENTITY a11362 SYSTEM "online/a11362.gif" NDATA gif>
<!ENTITY a10650 SYSTEM "online/a10650.gif" NDATA gif>
<!ENTITY a10209 SYSTEM "online/a10209.gif" NDATA gif>
<!ENTITY a10180 SYSTEM "online/a10180.gif" NDATA gif>
<!ENTITY a10181 SYSTEM "online/a10181.gif" NDATA gif>
<!ENTITY a10195 SYSTEM "online/a10195.gif" NDATA gif>
<!ENTITY a10196 SYSTEM "online/a10196.gif" NDATA gif>
<!ENTITY a10197 SYSTEM "online/a10197.gif" NDATA gif>
<!ENTITY a10198 SYSTEM "online/a10198.gif" NDATA gif>
<!ENTITY a10200 SYSTEM "online/a10200.gif" NDATA gif>
<!ENTITY a10201 SYSTEM "online/a10201.gif" NDATA gif>
<!ENTITY a10206 SYSTEM "online/a10206.gif" NDATA gif>
<!ENTITY a10207 SYSTEM "online/a10207.gif" NDATA gif>
<!ENTITY a10253 SYSTEM "online/a10253.gif" NDATA gif>
<!ENTITY a10254 SYSTEM "online/a10254.gif" NDATA gif>
<!ENTITY a10255 SYSTEM "online/a10255.gif" NDATA gif>
<!ENTITY a10256 SYSTEM "online/a10256.gif" NDATA gif>
<!ENTITY a10257 SYSTEM "online/a10257.gif" NDATA gif>
<!ENTITY a10258 SYSTEM "online/a10258.gif" NDATA gif>
<!ENTITY a10259 SYSTEM "online/a10259.gif" NDATA gif>
<!ENTITY a11427 SYSTEM "online/a11427.gif" NDATA gif>
<!ENTITY a11428 SYSTEM "online/a11428.gif" NDATA gif>
<!ENTITY a11429 SYSTEM "online/a11429.gif" NDATA gif>
<!ENTITY a11430 SYSTEM "online/a11430.gif" NDATA gif>
<!ENTITY a11431 SYSTEM "online/a11431.gif" NDATA gif>
<!ENTITY a11432 SYSTEM "online/a11432.gif" NDATA gif>
<!ENTITY conventions.abbreviation SYSTEM "frontmatter/conventions.abbreviation.sgml">
<!ENTITY collections SYSTEM "dwebcollections.sgml">
<!ENTITY unicos SYSTEM "frontmatter/unicos.sgml">
<!ENTITY trademarks SYSTEM "frontmatter/trademarks.sgml">
<!ENTITY disclaimer SYSTEM "frontmatter/disclaimer.sgml">
<!ENTITY rights SYSTEM "frontmatter/rights.sgml">
<!ENTITY manpage.section SYSTEM "frontmatter/manpage.section.sgml">
<!ENTITY % public.private "INCLUDE">
<!ENTITY % proprietary "IGNORE">
<!ENTITY % private "IGNORE">
<!ENTITY % public "INCLUDE">
<!ENTITY % craysoft "INCLUDE">
<!ENTITY conventions.ellipses SYSTEM "frontmatter/conventions.ellipses.sgml">
<!ENTITY conventions.manpage SYSTEM "frontmatter/conventions.manpage.sgml">
<!ENTITY conventions.variable SYSTEM "frontmatter/conventions.variable.sgml">
<!ENTITY conventions.brackets SYSTEM "frontmatter/conventions.brackets.sgml">
<!ENTITY conventions.command SYSTEM "frontmatter/conventions.command.sgml">
<!ENTITY conventions.userinput SYSTEM "frontmatter/conventions.userinput.sgml">
<!ENTITY machines.craympp SYSTEM "frontmatter/machines.craympp.sgml">
<!ENTITY machines.allcraysystems SYSTEM "frontmatter/machines.allcraysystems.sgml">
<!ENTITY standards SYSTEM "frontmatter/standards.sgml">
<!ENTITY reader.comments SYSTEM "frontmatter/reader.comments.sgml">
<!ENTITY ordering.pubs SYSTEM "frontmatter/ordering.pubs.sgml">
<!ENTITY a12229 SYSTEM "online/a12229.gif" NDATA gif>
<!ENTITY a12228 SYSTEM "online/a12228.gif" NDATA gif>
<!ENTITY a12227 SYSTEM "online/a12227.gif" NDATA gif>
<!ENTITY a12226 SYSTEM "online/a12226.gif" NDATA gif>
<!ENTITY a12225 SYSTEM "online/a12225.gif" NDATA gif>
<!ENTITY a12224 SYSTEM "online/a12224.gif" NDATA gif>
<!ENTITY a12223 SYSTEM "online/a12223.gif" NDATA gif>
<!ENTITY a12222 SYSTEM "online/a12222.gif" NDATA gif>
<!ENTITY a12221 SYSTEM "online/a12221.gif" NDATA gif>
<!ENTITY a12220 SYSTEM "online/a12220.gif" NDATA gif>
<!ENTITY a12219 SYSTEM "online/a12219.gif" NDATA gif>
<!ENTITY a12218 SYSTEM "online/a12218.gif" NDATA gif>
<!ENTITY a12217 SYSTEM "online/a12217.gif" NDATA gif>
<!ENTITY a12216 SYSTEM "online/a12216.gif" NDATA gif>
<!ENTITY a12215 SYSTEM "online/a12215.gif" NDATA gif>
<!ENTITY a12214 SYSTEM "online/a12214.gif" NDATA gif>
<!ENTITY a12213 SYSTEM "online/a12213.gif" NDATA gif>
<!ENTITY a12212 SYSTEM "online/a12212.gif" NDATA gif>
<!ENTITY a12211 SYSTEM "online/a12211.gif" NDATA gif>
<!ENTITY a12210 SYSTEM "online/a12210.gif" NDATA gif>
<!ENTITY a12209 SYSTEM "online/a12209.gif" NDATA gif>
<!ENTITY a12208 SYSTEM "online/a12208.gif" NDATA gif>
<!ENTITY a12207 SYSTEM "online/a12207.gif" NDATA gif>
<!ENTITY a12206 SYSTEM "online/a12206.gif" NDATA gif>
<!ENTITY a12205 SYSTEM "online/a12205.gif" NDATA gif>
<!ENTITY a12204 SYSTEM "online/a12204.gif" NDATA gif>
<!ENTITY a12203 SYSTEM "online/a12203.gif" NDATA gif>
<!ENTITY a12202 SYSTEM "online/a12202.gif" NDATA gif>
<!ENTITY a12201 SYSTEM "online/a12201.gif" NDATA gif>
<!ENTITY a12200 SYSTEM "online/a12200.gif" NDATA gif>
<!ENTITY a12199 SYSTEM "online/a12199.gif" NDATA gif>
<!ENTITY a12198 SYSTEM "online/a12198.gif" NDATA gif>
<!ENTITY a12197 SYSTEM "online/a12197.gif" NDATA gif>
<!ENTITY a12196 SYSTEM "online/a12196.gif" NDATA gif>
<!ENTITY a12195 SYSTEM "online/a12195.gif" NDATA gif>
<!ENTITY a12194 SYSTEM "online/a12194.gif" NDATA gif>
<!ENTITY a12193 SYSTEM "online/a12193.gif" NDATA gif>
<!ENTITY a12192 SYSTEM "online/a12192.gif" NDATA gif>
<!ENTITY a12191 SYSTEM "online/a12191.gif" NDATA gif>
<!ENTITY a12190 SYSTEM "online/a12190.gif" NDATA gif>
<!ENTITY a12189 SYSTEM "online/a12189.gif" NDATA gif>
<!ENTITY % IRIX.intros "IGNORE">
<!ENTITY % UAG "INCLUDE">
<!ENTITY ch02.sgml SYSTEM "ch02.sgml">
<!ENTITY ch03.sgml SYSTEM "ch03.sgml">
<!ENTITY ch04.sgml SYSTEM "ch04.sgml">
<!ENTITY ch05.sgml SYSTEM "ch05.sgml">
<!ENTITY ch06.sgml SYSTEM "ch06.sgml">
<!ENTITY ch07.sgml SYSTEM "ch07.sgml">
<!ENTITY ch08.sgml SYSTEM "ch08.sgml">
<!ENTITY ch09.sgml SYSTEM "ch09.sgml">
<!ENTITY chA.sgml SYSTEM "chA.sgml">
<!ENTITY preface.sgml SYSTEM "preface.sgml">
]>
-->
<?Pub UDT _bookmark _target>
<?Pub UDT _nopagebreak _touchup KeepsKeep="yes" KeepsPrev="no" KeepsNext="no" KeepsBoundary="page">
<?Pub Inc>
<chapter id="LE91944-PARENT">
<title id="LE91944-TITLE">Introduction to Performance Co-Pilot</title>
<para><indexterm id="ITch01-0"><primary>overview</primary></indexterm><indexterm>
<primary>PCP</primary><secondary>features</secondary></indexterm><indexterm>
<primary>Performance Co-Pilot</primary><see>PCP</see></indexterm>This
chapter provides an introduction to Performance Co-Pilot (PCP), an overview
of its individual components, and conceptual information to help you use
this product.</para>
<para>The following sections are included:</para>
<itemizedlist>
<listitem><para><xref linkend="LE92676-TITLE"> covers the intended purposes
of PCP.</para>
</listitem>
<listitem><para><xref linkend="LE13618-PARENT">, describes PCP tools and
agents.</para>
</listitem>
<listitem><para><xref linkend="LE79836-PARENT">, discusses the design
theories behind PCP.</para>
</listitem></itemizedlist>
<section id="LE92676-PARENT">
<title id="LE92676-TITLE">Objectives</title>
<para><indexterm><primary>objectives</primary></indexterm></para>
<para>Performance Co-Pilot (PCP) provides a range of services that may
be used to monitor and manage system performance. These services are distributed
and scalable to accommodate the most complex system configurations and
performance problems.</para>
<section id="LE67354-PARENT">
<title id="LE67354-TITLE">PCP Target Usage</title>
<para><indexterm><primary>target usage</primary></indexterm>PCP is targeted
at the performance analyst, benchmarker, capacity planner, developer,
database administrator, or system administrator with an interest in overall
system performance and a need to quickly isolate and understand performance
behavior, resource utilization, activity levels, and bottlenecks in complex
systems. Platforms that can benefit from this level of performance analysis
include large servers, server clusters, or multiserver sites delivering
Database Management Systems (DBMS), compute, Web, file, or video services.
</para>
</section>
<section id="LE79006-PARENT">
<title id="LE79006-TITLE">Empowering the PCP User</title>
<para><indexterm><primary>audience</primary></indexterm>To deal efficiently
with the dynamic behavior of complex systems, performance analysts need
to filter out noise from the overwhelming stream of performance data,
and focus on exceptional scenarios. Visualization of current and historical
performance data, and automated reasoning about performance data, effectively
provide this filtering.</para>
<para>From the PCP end user's perspective, PCP presents an integrated
suite of tools, user interfaces, and services that support real-time and
retrospective performance analysis, with a bias towards eliminating mundane
information and focusing attention on the exceptional and extraordinary
performance behaviors. When this is done, the user can concentrate on
in-depth analysis or target management procedures for those critical system
performance problems.</para>
</section>
<section id="LE35382-PARENT">
<title id="LE35382-TITLE">Unification of Performance Metric Domains</title>
<para><indexterm><primary>domains</primary></indexterm><indexterm><primary>
metric domains</primary></indexterm>At the lowest level, performance metrics
are collected and managed in autonomous performance domains such as the
Linux operating system, a DBMS, a layered service, or an end-user application.
These domains feature a multitude of access control policies, access methods,
data semantics, and multiversion support. All this detail is irrelevant
to the developer or user of a performance monitoring tool, and is hidden
by the PCP infrastructure.</para>
<para><indexterm><primary>PMDA</primary><secondary>unification</secondary>
</indexterm><indexterm><primary>Performance Metrics Domain Agent</primary>
<see>PMDA</see></indexterm>Performance Metrics Domain Agents (PMDAs) within
PCP encapsulate the knowledge about, and export performance information
from, autonomous performance domains.</para>
</section>
<section id="LE83994-PARENT">
<title id="LE83994-TITLE">Uniform Naming and Access to Performance Metrics
</title>
<para><indexterm><primary>uniform naming</primary></indexterm><indexterm>
<primary>naming scheme</primary></indexterm><indexterm><primary>PMNS</primary>
<secondary>defined names</secondary></indexterm><indexterm><primary>Performance
Metrics Name Space</primary><see>PMNS</see></indexterm>Usability and extensibility
of performance management tools mandate a single scheme for naming performance
metrics. The set of defined names constitutes a Performance Metrics Name
Space (PMNS). Within PCP, the PMNS is adaptive so it can be extended,
reshaped, and pruned to meet the needs of particular applications and
users.</para>
<para>PCP provides a single interface to name and retrieve values for
all performance metrics, independently of their source or location.</para>
</section>
<section id="LE85063-PARENT">
<title id="LE85063-TITLE">PCP Distributed Operation</title>
<para><indexterm id="ITch01-2"><primary>PCP</primary><secondary>distributed
operation</secondary></indexterm>From a purely pragmatic viewpoint, a
single workstation must be able to monitor the concurrent performance
of multiple remote hosts. At the same time, a single host may be subject
to monitoring from multiple remote workstations.</para>
<para><indexterm><primary>client-server architecture</primary></indexterm>These
requirements suggest a classic client-server architecture, which is exactly
what PCP uses to provide concurrent and multiconnected access to performance
metrics, independent of their host location.</para>
</section>
<section id="LE87326-PARENT">
<title id="LE87326-TITLE">Dynamic Adaptation to Change</title>
<para><indexterm><primary>dynamic adaptation</primary></indexterm><indexterm>
<primary>adaptation</primary></indexterm>Complex systems are subject to
continual changes as network connections fail and are reestablished; nodes
are taken out of service and rebooted; hardware is added and removed;
and software is upgraded, installed, or removed. Often these changes are
asynchronous and remote (perhaps in another geographic region or domain
of administrative control).</para>
<para>The distributed nature of the PCP (and the modular fashion in which
performance metrics domains can be installed, upgraded, and configured
on different hosts) enables PCP to adapt concurrently to changes in the
monitored system(s). Variations in the available performance metrics as
a consequence of configuration changes are handled automatically and become
visible to all clients as soon as the reconfigured host is rebooted or
the responsible agent is restarted.</para>
<para>PCP also detects loss of client-server connections, and most clients
support subsequent automated reconnection.</para>
</section>
<section id="LE13859-PARENT">
<title id="LE13859-TITLE">Logging and Retrospective Analysis</title>
<para><indexterm><primary>archive logs</primary><secondary>analysis</secondary>
</indexterm><indexterm id="ITch01-3"><primary>logging</primary><see>archive
logs</see></indexterm>A range of tools is provided to support flexible,
adaptive logging of performance metrics for archive, playback, remote
diagnosis, and capacity planning. PCP archive logs may be accumulated
either at the host being monitored, at a monitoring workstation, or both.
</para>
<para>A universal replay mechanism, modeled on VCR controls, supports
play, step, rewind, fast forward at variable speed processing of archived
performance data.</para>
<para>Most PCP applications are able to process archive logs and real-time
performance data with equal facility. Unification of real-time access
and access to the archive logs, in conjunction with VCR-like viewing controls,
provides new and powerful ways to build performance tools and to review
both current and historical performance data.</para>
</section>
<section id="LE36677-PARENT">
<title id="LE36677-TITLE">Automated Operational Support</title>
<para><indexterm><primary>automated operational support</primary></indexterm>For
operational and production environments, PCP provides a framework with
scripts to customize in order to automate the execution of ongoing tasks
such as these:</para>
<itemizedlist>
<listitem><para><indexterm><primary>centralized archive logging</primary>
</indexterm>Centralized archive logging for multiple remote hosts</para>
</listitem>
<listitem><para><indexterm><primary>archive logs</primary><secondary>
customization</secondary></indexterm>Archive log rotation, consolidation,
and culling</para>
</listitem>
<listitem><para>WWW-based publishing of charts showing snapshots of performance
activity levels in the recent past</para>
</listitem>
<listitem><para>Flexible alarm monitoring: parameterized rules to address
common critical performance scenarios and facilities to customize and
refine this monitoring</para>
</listitem>
<listitem><para><indexterm><primary>audits</primary></indexterm>Retrospective
performance audits covering the recent past; for example, daily or weekly
checks for performance regressions or quality of service problems</para>
</listitem></itemizedlist>
</section>
<section id="LE38522-PARENT">
<title id="LE38522-TITLE">PCP Extensibility</title>
<para><indexterm><primary>extensibility</primary></indexterm><indexterm>
<primary>PCP</primary><secondary>extensibility</secondary></indexterm>PCP
permits the integration of new performance metrics into the PMNS, the
collection infrastructure, and the logging framework. The guiding principle
is, &ldquo;if it is important for monitoring system performance, and you
can measure it, you can easily integrate it into the PCP framework.&rdquo;
</para>
<para>For many PCP customers, the most important performance metrics are
not those already supported, but new performance metrics that characterize
the essence of good or bad performance at their site, or within their
particular application environment.</para>
<para>One example is an application that measures the round-trip time
for a benign &ldquo;probe&rdquo; transaction against some mission-critical
application.</para>
<para><indexterm><primary>PMDA</primary><secondary>libraries</secondary>
</indexterm>For application developers, a library is provided to support
easy-to-use insertion of trace and monitoring points within an application,
and the automatic export of resultant performance data into the PCP framework.
Other libraries and tools aid the development of customized and fully
featured Performance Metrics Domain Agents (PMDAs).</para>
<para>Extensive source code examples are provided in the distribution,
and by using the PCP toolkit and interfaces, these customized measures
of performance or quality of service can be easily and seamlessly integrated
into the PCP framework.</para>
</section>
<section id="LE40772-PARENT">
<title id="LE40772-TITLE">Metric Coverage</title>
<para><indexterm><primary>Challenge systems</primary></indexterm>The core
PCP modules support export of performance metrics that include all kernel
instrumentation, hardware instrumentation, process-level resource utilization,
and activity in the PCP collection infrastructure.</para>
<para>The supplied agents support over 1000 distinct performance metrics,
many of which can have multiple values, for example, per disk, per CPU,
or per process.</para>
</section>
</section>
<section id="LE13618-PARENT">
<title id="LE13618-TITLE">Overview of Component Software</title>
<para><indexterm><primary>software</primary></indexterm><indexterm><primary>
component software</primary></indexterm>Performance Co-Pilot (PCP) is
composed of text-based tools and related commands. Each tool or command
is fully documented by a man page. These man pages are named after the
tools or commands they describe, and are accessible through the <command>
man</command> command. For example, to see the <command sectionref="1">
pminfo</command> man page for the <command>pminfo</command> command, enter
this command:</para>
<literallayout><userinput>man pminfo</userinput></literallayout>
<para>A list of PCP tools and commands, grouped by functionality, is provided
in the following four sections.</para>
<section>
<title>Performance Monitoring and Visualization</title>
<para><indexterm><primary>PCP</primary><secondary>tool summaries</secondary>
</indexterm><indexterm><primary>performance monitoring</primary></indexterm>The
following tools provide the principal services for the PCP end-user with
an interest in monitoring, visualizing, or processing performance information
collected either in real time or from PCP archive logs:</para>
<deflist>
<deflistentry>
<term><command>pmdumptext</command></term>
<listitem><para><indexterm id="ITch01-22"><primary>pmdumptext tool</primary>
<secondary>brief description</secondary></indexterm>Outputs the values
of performance metrics collected live or from a PCP archive, as ASCII
text.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmie</command></term>
<listitem><para><indexterm id="ITch01-32"><primary>pmie tool</primary>
<secondary>brief description</secondary></indexterm>Evaluates predicate-action
rules over performance metrics domain, for performance alarms, automated
system management tasks, dynamic tuning configuration, and so on. It is
an inference engine.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmieconf</command></term>
<listitem><para><indexterm><primary>pmieconf tool</primary><secondary>
brief description</secondary></indexterm><indexterm><primary>pmie tool
</primary><secondary>pmieconf rules</secondary></indexterm>Creates parameterized
rules to be used with the PCP inference engine (<command>pmie</command>).
</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pminfo</command></term>
<listitem><para><indexterm id="ITch01-34"><primary>pminfo tool</primary>
<secondary>brief description</secondary></indexterm>Displays information
about arbitrary performance metrics available from PCP, including help
text with <literal>-T</literal>.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmkstat</command></term>
<listitem><para><indexterm id="ITch01-37"><primary>pmkstat tool</primary>
<secondary>brief description</secondary></indexterm>Provides a text-based
display of metrics that summarize system performance at a high level,
suitable for ASCII logs or inquiry over a modem.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlogsummary</command></term>
<listitem><para><indexterm><primary>pmlogsummary tool</primary></indexterm>Calculates
and reports various statistical summaries of the performance metric values
from a PCP archive.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmprobe</command></term>
<listitem><para><indexterm><primary>pmprobe tool</primary></indexterm>Probes
for performance metric availability, values, and instances.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmsocks</command></term>
<listitem><para><indexterm id="ITch01-38"><primary>pmsocks tool</primary>
<secondary>brief description</secondary></indexterm>Allows the execution
of PCP tools through a network firewall system provided <literal>sockd
</literal> services are supported.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmval</command></term>
<listitem><para><indexterm id="ITch01-42"><primary>pmval tool</primary>
<secondary>brief description</secondary></indexterm>Provides a text-based
display of the values for arbitrary instances of a selected performance
metric, suitable for ASCII logs or inquiry over a modem.</para>
</listitem></deflistentry>
</deflist>
</section>
<section>
<title>Collecting, Transporting, and Archiving Performance Information
</title>
<para><indexterm><primary>PCP</primary><secondary>tool summaries</secondary>
</indexterm><indexterm><primary>data collection tools</primary></indexterm><indexterm>
<primary>network transportation tools </primary></indexterm><indexterm>
<primary>archive logs</primary><secondary>creation</secondary></indexterm>PCP
provides the following tools to support real-time data collection, network
transport, and archive log creation services for performance data:</para>
<deflist>
<deflistentry>
<term><command>mkaf</command></term>
<listitem><para><indexterm id="ITch01-48"><primary>mkaf tool</primary>
</indexterm>Aggregates an arbitrary collection of PCP archive logs into
a <firstterm>folio</firstterm> to be used with <command>pmafm</command>.
</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmafm</command></term>
<listitem><para><indexterm id="ITch01-50"><primary>pmafm tool</primary>
<secondary>brief description</secondary></indexterm>Interrogates, manages,
and replays an archive folio as created by <command>mkaf</command>, or
the periodic archive log management scripts, or the record mode of other
PCP tools.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmcd</command></term>
<listitem><para><indexterm id="ITch01-52"><primary>PMCD</primary><secondary>
brief description</secondary></indexterm><indexterm><primary>Performance
Metrics Collection Daemon</primary><see>PMCD</see></indexterm><indexterm>
<primary>pmcd tool</primary><see>PMCD</see></indexterm>Is the Performance
Metrics Collection Daemon (PMCD). This daemon must run on each system
being monitored, to collect and export the performance information necessary
to monitor the system.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmcd_wait</command></term>
<listitem><para><indexterm><primary>pmcd_wait tool</primary></indexterm>Waits
for <command>pmcd</command> to be ready to accept client connections.
</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdabrocade</command></term>
<listitem><indexterm><primary>pmdabrocade tool</primary></indexterm><para>
Measures the bytes read and written across each port of a Brocade fiber
channel switch.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdamailq</command></term>
<listitem><para><indexterm id="ITch01-58"><primary>pmdamailq tool</primary>
</indexterm>Exports performance metrics describing the current state of
items in the <literal>sendmail</literal> queue. It is a PMDA.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdacisco</command></term>
<listitem><para><indexterm id="ITch01-54"><primary>pmdacisco tool</primary>
</indexterm>Extracts performance metrics from one or more Cisco routers.
It is a Performance Metrics Domain Agent (PMDA).</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdampi</command></term>
<listitem><indexterm><primary>pmdampi tool</primary></indexterm><para>
Exports metrics from MPI applications linked with the <filename>pcp_mpi
</filename> shared library. The metrics include counts and accumulated
time for selected MPI functions and statistics on MPI buffer usage.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdasendmail</command></term>
<listitem><para><indexterm><primary>pmdasendmail tool</primary></indexterm>Exports
mail activity statistics from <command>sendmail</command>. It is a PMDA.
</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>pmdashping</literal></term>
<listitem><para><indexterm id="ITch01-60"><primary>pmdahotproc tool</primary>
</indexterm>Exports performance metrics for the availability and quality
of service (response-time) for arbitrary shell commands. It is a PMDA.
</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdasummary</command></term>
<listitem><para><indexterm id="ITch01-62"><primary>pmdasummary tool</primary>
</indexterm>Derives performance metrics values from values made available
by other PMDAs. It is a PMDA.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>pmdatrace</literal></term>
<listitem><para><indexterm id="ITch01-64"><primary>pmdatrace tool</primary>
</indexterm>Exports transaction performance metrics from application processes
that use the <filename>pcp_trace</filename> library. It is a PMDA.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdaweblog</command></term>
<listitem><indexterm><primary>pmdaweblog tool</primary></indexterm><para>
Scans Web-server logs to extract metrics characterizing.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdumplog</command></term>
<listitem><para><indexterm id="ITch01-66"><primary>pmdumplog tool</primary>
<secondary>brief description</secondary></indexterm>Displays selected
state information, control data, and metric values from a PCP archive
log created by <command>pmlogger</command>.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlc</command></term>
<listitem><para><indexterm id="ITch01-68"><primary>pmlc tool</primary>
<secondary>brief description</secondary></indexterm>Exercises control
over an instance of the PCP archive logger <command>pmlogger</command>,
to modify the profile of which metrics are logged and/or how frequently
their values are logged.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlogcheck</command></term>
<listitem><para><indexterm><primary>pmlogcheck tool</primary></indexterm>Performs
integrity check for PCP archives.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlogconf</command></term>
<listitem><para><indexterm><primary>pmlogconf tool</primary></indexterm>Creates
or modifies <command>pmlogger</command> configuration files for most common
logging scenarios. It is an interactive script.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlogextract</command></term>
<listitem><para><indexterm id="ITch01-72"><primary>pmlogextract tool</primary>
</indexterm>Reads one or more PCP archive logs and creates a temporally
merged and reduced PCP archive log as output.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlogger</command></term>
<listitem><para><indexterm><primary>pmlogger tool</primary><secondary>
brief description</secondary></indexterm>Creates PCP archive logs of performance
metrics over time. Many tools accept these PCP archive logs as alternative
sources of metrics for retrospective analysis.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmtrace</command></term>
<listitem><para><indexterm id="ITch01-74"><primary>pmtrace tool</primary>
</indexterm>Provides a simple command line interface to the trace PMDA
and its associated <filename>pcp_trace</filename> library.</para>
</listitem></deflistentry>
</deflist>
</section>
<section>
<title>Operational and Infrastructure Support</title>
<para><indexterm><primary>PCP</primary><secondary>tool summaries</secondary>
</indexterm><indexterm><primary>operational support tools</primary></indexterm><indexterm
id="ITch01-76"><primary>infrastructure support tools</primary></indexterm>PCP
provides the following tools to support the PCP infrastructure and assist
operational procedures for PCP deployment in a production environment:
</para>
<deflist>
<deflistentry>
<term><command>hipprobe</command></term>
<listitem><para><indexterm><primary>hipprobe tool</primary></indexterm>Probes
the state of the configured HIPPI interfaces. Used by the <literal>shping
</literal> PMDA.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pcp</command></term>
<listitem><para><indexterm><primary>pcp tool</primary></indexterm>Summarizes
that state of a PCP installation.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdbg</command></term>
<listitem><para><indexterm id="ITch01-89"><primary>pmdbg facility</primary>
</indexterm><indexterm><primary>diagnostic tools</primary></indexterm><indexterm
id="ITch01-90"><primary>debugging tools</primary></indexterm>Describes
the available facilities and associated control flags. PCP tools include
internal diagnostic and debugging facilities that may be activated by
run-time flags.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmerr</command></term>
<listitem><para><indexterm id="ITch01-91"><primary>pmerr tool</primary>
</indexterm>Translates PCP error codes into human-readable error messages.
</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmhostname</command></term>
<listitem><para><indexterm><primary>pmhostname tool</primary></indexterm>Reports
hostname as returned by <command>gethostbyname</command>. Used in assorted
PCP management scripts.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmie_check</command></term>
<listitem><para><indexterm><primary>pmie tool</primary><secondary>brief
description</secondary></indexterm>Administration of the Performance Co-Pilot
inference engine (<command>pmie</command>).</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlock</command></term>
<listitem><para><indexterm id="ITch01-95"><primary>pmlock tool</primary>
</indexterm>Attempts to acquire an exclusive lock by creating a file with
a mode of 0.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlogger_*</command></term>
<listitem><para><indexterm><primary>pmlogger_check script</primary></indexterm><indexterm>
<primary>pmlogger_daily script</primary></indexterm><indexterm><primary>
pmlogger_merge script</primary></indexterm><indexterm><primary>pmsnap
tool</primary><secondary>brief description</secondary></indexterm><indexterm>
<primary>scripts</primary></indexterm>Allows you to create a customized
regime of administration and management for PCP archive log files. The <literal>
pmlogger_check</literal>, <literal>pmlogger_daily</literal>, and <literal>
pmlogger_merge</literal> scripts are intended for periodic execution via
the <command>cron</command> command.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmnewlog</command></term>
<listitem><para><indexterm id="ITch01-100"><primary>pmnewlog tool</primary>
</indexterm>Performs archive log rotation by stopping and restarting an
instance of <command>pmlogger</command>.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmnsadd</command></term>
<listitem><para><indexterm id="ITch01-102"><primary>pmnsadd tool</primary>
</indexterm>Adds a subtree of new names into a PMNS, as used by the components
of PCP.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmnscomp</command></term>
<listitem><para><indexterm id="ITch01-104"><primary>pmnscomp tool</primary>
<secondary>brief description</secondary></indexterm>Compiles a PMNS in
ASCII format into a more efficient binary representation.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmnsdel</command></term>
<listitem><para><indexterm id="ITch01-106"><primary>pmnsdel tool</primary>
</indexterm>Removes a subtree of names from a PMNS, as used by the components
of the PCP.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmnsmerge</command></term>
<listitem><para><indexterm><primary>pcp tool</primary></indexterm>Merges
multiple PMNS files together, as used by the components of PCP.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmstore</command></term>
<listitem><para><indexterm id="ITch01-112"><primary>pmstore tool</primary>
<secondary>brief description</secondary></indexterm>Reinitializes counters
or assigns new values to metrics that act as control variables. The command
changes the current values for the specified instances of a single performance
metric.</para>
</listitem></deflistentry>
</deflist>
</section>
<section>
<title>Application and Agent Development</title>
<para><indexterm id="ITch01-114"><primary>application programs</primary>
</indexterm><indexterm><primary>PCP</primary><secondary>tool summaries
</secondary></indexterm>The following PCP tools aid the development of
new programs to consume performance data, and new agents to export performance
data within the PCP framework:</para>
<deflist>
<deflistentry>
<term><command>chkhelp</command></term>
<listitem><para><indexterm id="ITch01-115"><primary>chkhelp tool</primary>
</indexterm>Checks the consistency of performance metrics help database
files.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>dbpmda</command></term>
<listitem><para><indexterm id="ITch01-117"><primary>dbpmda tool</primary>
</indexterm>Allows PMDA behavior to be exercised and tested. It is an
interactive debugger for PMDAs.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>newhelp</command></term>
<listitem><para><indexterm id="ITch01-119"><primary>newhelp tool</primary>
</indexterm>Generates the database files for one or more source files
of PCP help text.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmapi</command></term>
<listitem><para><indexterm id="ITch01-121"><primary>pmclient tool</primary>
</indexterm><indexterm><primary>PMAPI</primary><secondary>brief description
</secondary></indexterm><indexterm><primary>Performance Metrics Application
Programming Interface </primary><see>PMAPI</see></indexterm>Defines a
procedural interface for developing PCP client applications. It is the
Performance Metrics Application Programming Interface (PMAPI).</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>pmclient</literal></term>
<listitem><para><indexterm id="ITch01-123"><primary>pmclient tool</primary>
</indexterm>Is a simple client that uses the PMAPI to report some high-level
system performance metrics. The source code for <command>pmclient</command>
is included in the distribution.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmda</command></term>
<listitem><para><indexterm id="ITch01-127"><primary>pmda tool</primary>
<see>PMDA</see></indexterm>Is a library used by many shipped PMDAs to
communicate with a <command>pmcd</command> process. It can expedite the
development of new and custom PMDAs.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmgenmap</command></term>
<listitem><para><indexterm id="ITch01-125"><primary>pmgenmap tool</primary>
</indexterm>Generates C declarations and <literal>cpp</literal> macros
to aid the development of customized programs that use the facilities
of PCP. It is a program development tool.</para>
</listitem></deflistentry>
</deflist>
</section>
</section>
<section id="LE79836-PARENT">
<title id="LE79836-TITLE">Conceptual Foundations</title>
<para><indexterm id="ITch01-129"><primary>conceptual foundations</primary>
</indexterm>The following sections provide a detailed overview of concepts
that underpin Performance Co-Pilot (PCP).</para>
<section>
<title>Performance Metrics</title>
<para><indexterm id="ITch01-130"><primary>PMAPI</primary><secondary>naming
metrics</secondary></indexterm><indexterm><primary>performance metrics
</primary><secondary>concept</secondary></indexterm> Across all of the
supported performance metric domains, there are a large number of performance
metrics. Each metric has its own structure and semantics. PCP presents
a uniform interface to these metrics, independent of the underlying metric
data source.</para>
<para><indexterm><primary>PMNS</primary><secondary>brief description</secondary>
</indexterm>The Performance Metrics Name Space (PMNS) provides a hierarchical
classification of external metric names, and a mapping from external names
to internal metric identifiers. See <xref linkend="LE94677-PARENT">, for
a description of the PMNS.</para>
</section>
<section>
<title>Performance Metric Instances</title>
<para>When performance metric values are returned to a requesting application,
there may be more than one value instance for a particular metric; for
example, independent counts for each CPU, process, disk, or local filesystem.
Internal instance identifiers correspond one to one with external (textual)
descriptions of the members of an instance domain.</para>
<para>Transient performance metrics (such as per-process information,
per-XLV volume, and so on) cause repeated requests for the same metric
to return different numbers of values, or changes in the particular instance
identifiers returned. These changes are expected and fully supported by
the PCP infrastructure; however, metric instantiation is guaranteed to
be valid only at the time of collection.</para>
</section>
<section>
<title>Current Metric Context</title>
<para>When performance metrics are retrieved, they are delivered in the
context of a particular source of metrics, a point in time, and a profile
of desired instances. This means that the application making the request
has already negotiated to establish the context in which the request should
be executed.</para>
<para><indexterm><primary>pmlogger tool</primary><secondary>current metric
context</secondary></indexterm>A metric source may be the current performance
data from a particular host (a live or real-time source), or an archive
log of performance data collected by <command>pmlogger</command> at some
distant host or at an earlier time (a retrospective or archive source).
</para>
<para><indexterm id="ITch01-134"><primary>collection time</primary></indexterm>By
default, the collection time for a performance metric is the current time
of day for real-time sources, or current point within an archive source.
For archives, the collection time may be reset to an arbitrary time within
the bounds of the <indexterm id="ITch01-135"><primary>archive logs</primary>
<secondary>collection time</secondary></indexterm> archive log.</para>
</section>
<section>
<title>Sources of Performance Metrics and Their Domains</title>
<para><indexterm id="ITch01-137"><primary>performance metrics</primary>
<secondary>sources</secondary></indexterm><indexterm id="ITch01-138">
<primary>functional domains</primary></indexterm> Instrumentation for
the purpose of performance monitoring typically consists of counts of
activity or events, attribution of resource consumption, and service-time
or response-time measures. This instrumentation may exist in one or more
of the functional domains as shown in <xref linkend="LE92548-TITLE">.
</para>
<figure width="wide">
<graphic entityref="a12189" width="standard" scale="NO"></graphic>
<title id="LE92548-TITLE">Performance Metric Domains as Autonomous Collections
of Data</title>
</figure>
<?Pub _newpage>
<para>Each domain has an associated access method:</para>
<itemizedlist>
<listitem><para><indexterm><primary>sar data structures</primary></indexterm>The
Linux kernel, including <command>sar</command> data structures, per-process
resource consumption, network statistics, disk activity, or memory management
instrumentation.</para>
</listitem>
<listitem><para><indexterm><primary>NNTP news servers</primary></indexterm><indexterm>
<primary>layered software services</primary></indexterm>A layered software
service such as activity logs for a World Wide Web server or an NNTP news
server.<indexterm><primary>application programs</primary></indexterm></para>
</listitem>
<listitem><para>An application program such as measured response time
for a production application running a periodic and benign probe transaction
(as often required in service quality agreements), or rate of computation
and throughput in jobs per hour for a batch stream.</para>
</listitem>
<listitem><para><indexterm><primary>network routers and bridges</primary>
</indexterm><indexterm><primary>external equipment</primary></indexterm>External
equipment such as network routers and bridges.</para>
</listitem></itemizedlist>
<para><indexterm id="ITch01-139"><primary>performance metrics</primary>
<secondary>methods</secondary></indexterm>For each domain, the set of
performance metrics may be viewed as an abstract data type, with an associated
set of methods that may be used to perform the following tasks:</para>
<itemizedlist>
<listitem><para>Interrogate the metadata that describes the syntax and
semantics of the performance metrics</para>
</listitem>
<listitem><para>Control (enable or disable) the collection of some or
all of the metrics</para>
</listitem>
<listitem><para>Extract instantiations (current values) for some or all
of the metrics</para>
</listitem></itemizedlist>
<para>We refer to each functional domain as a performance metrics domain
and assume that domains are functionally, architecturally, and administratively
independent and autonomous. Obviously the set of performance metrics domains
available on any host is variable, and changes with time as software and
hardware are installed and removed.</para>
<para>The number of performance metrics domains may be further enlarged
in cluster-based or network-based configurations, where there is potentially
an instance of each performance metrics domain on each node. Hence, the
management of performance metrics domains must be both extensible at a
particular host and distributed across a number of hosts.</para>
<?Pub _newpage>
<para><indexterm><primary>PMID</primary><secondary>description</secondary>
</indexterm><indexterm><primary>Performance Metric Identifier</primary>
<see>PMID</see></indexterm>Each performance metrics domain on a particular
host must be assigned a unique Performance Metric Identifier (PMID). In
practice, this means unique identifiers are assigned globally for each
performance metrics domain type. For example, the same identifier would
be used for the Linux performance metrics domain on all hosts.</para>
</section>
<section>
<title>Distributed Collection</title>
<para><indexterm id="ITch01-142"><primary>distributed collection</primary>
</indexterm><indexterm id="ITch01-143"><primary>collector hosts</primary>
</indexterm><indexterm><primary>PMCD</primary><secondary>distributed collection
</secondary></indexterm>The performance metrics collection architecture
is distributed, in the sense that any performance tool may be executing
remotely. However, a PMDA must run on the system for which it is collecting
performance measurements. In most cases, connecting these tools together
on the collector host is the responsibility of the PMCD process, as shown
in <xref linkend="LE61231-TITLE">.</para>
<figure width="wide">
<graphic entityref="a12190" scale="NO"></graphic>
<title id="LE61231-TITLE">Process Structure for Distributed Operation
</title>
</figure>
<?Pub _newpage>
<para>The host running the monitoring tools does not require any collection
tools, including <command>pmcd</command>, because all requests for metrics
are sent to the <command>pmcd</command> process on the collector host.
These requests are then forwarded to the appropriate PMDAs, which respond
with metric descriptions, help text, and most importantly, metric values.
</para>
<para><indexterm><primary>PMCD</primary><secondary>distributed collection
</secondary></indexterm>The connections between monitor clients and <literal>
pmcd</literal> processes are managed in <filename>libpcp</filename>, below
the PMAPI level; see the <command sectionref="3">pmapi</command> man page.
Connections between PMDAs and <command>pmcd</command> are managed by the
PMDA routines; see the <command sectionref="3">pmda</command> man page.
There can be multiple monitor clients and multiple PMDAs on the one host,
but there may be at most one <literal>pmcd</literal> process.</para>
</section>
<section id="LE94677-PARENT">
<title id="LE94677-TITLE">Performance Metrics Name Space</title>
<para><indexterm id="ITch01-144"><primary>PMNS</primary><secondary>description
</secondary></indexterm> <indexterm id="ITch01-146"><primary>PMID</primary>
<secondary>description</secondary></indexterm>Internally, each unique
performance metric is identified by a Performance Metric Identifier (PMID)
drawn from a universal set of identifiers, including some that are reserved
for site-specific, application-specific, and customer-specific use.</para>
<para><indexterm id="ITch01-148"><primary>performance metrics</primary>
<secondary>PMNS</secondary></indexterm>An external name space called Performance
Metrics Name Space (PMNS) maps from a hierarchy (or tree) of external
names to PMIDs.</para>
<section>
<title>Performance Metrics Name Space Diagram</title>
<para>Each node in the PMNS tree is assigned a label that must begin with
an alphabet character, and be followed by zero or more alphanumeric characters
or the underscore (_) character. The root node of the tree has the special
label of <literal>root</literal>.</para>
<?Pub _newpage>
<para>A metric name is formed by traversing the tree from the root to
a leaf node with each node label on the path separated by a period. The
common prefix <literal>root</literal><emphasis>.</emphasis> is omitted
from all names. For example, <xref linkend="LE57522-TITLE"> shows the
nodes in a small subsection of a PMNS.</para>
<figure>
<graphic entityref="a12191" scale="NO"></graphic>
<title id="LE57522-TITLE">Small Performance Metrics Name Space (PMNS)
</title>
</figure>
<para>In this subsection, the following are valid names for performance
metrics:</para>
<literallayout>kernel.percpu.syscall
network.tcp.rcvpack
hw.router.recv.total_util

</literallayout>
<para>Although a default PMNS is shipped and updated by the components
of PCP, individual users may create their own Name Space for metrics of
interest, and all tools may use a private PMNS, rather than the default
PMNS.</para>
</section>
</section>
<section>
<title>Descriptions for Performance Metrics</title>
<para><indexterm id="ITch01-149"><primary>performance metrics</primary>
<secondary>descriptions</secondary></indexterm><indexterm id="ITch01-150">
<primary>metadata</primary></indexterm> Through the various performance
metric domains, the PCP must support a wide range of formats and semantics
for performance metrics. This <firstterm>metadata</firstterm> describing
the performance metrics includes the following:</para>
<itemizedlist>
<listitem><para>The internal identifier, Performance Metric Identifier
(PMID), for the metric</para>
</listitem>
<listitem><para><indexterm><primary>64-bit IEEE format</primary></indexterm>The
format and encoding for the values of the metric, for example, an unsigned
32-bit integer or a string or a 64-bit IEEE format floating point number
</para>
</listitem>
<listitem><para>The semantics of the metric, particularly the interpretation
of the values as free-running counters or instantaneous values</para>
</listitem>
<listitem><para>The dimensionality of the values, in the dimensions of
events, space, and time</para>
</listitem>
<listitem><para>The scale of values; for example, bytes, kilobytes (KB),
or megabytes (MB) for the space dimension</para>
</listitem>
<listitem><para>An indication if the metric may have one or many associated
values</para>
</listitem>
<listitem><para>Short (and extended) help text describing the metric</para>
</listitem></itemizedlist>
<para>For each metric, this metadata is defined within the associated
PMDA, and PCP arranges for the information to be exported to the performance
tools applications that use the metadata when interpreting the values
for performance metrics.</para>
</section>
<section>
<title>Values for Performance Metrics</title>
<para>The following sections describe two types of performance metrics,
single-valued and set-valued.</para>
<section>
<title>Single-Valued Performance Metrics</title>
<para><indexterm><primary>single-valued performance metrics</primary>
</indexterm>Some performance metrics have a singular value within their
performance metric domains. For example, available memory (or the total
number of context switches) has only one value per performance metric
domain, that is, one value per host. The metadata describing the metric
makes this fact known to applications that process values for these metrics.
</para>
</section>
<section>
<title>Set-Valued Performance Metrics</title>
<para><indexterm><primary>set-valued performance metrics</primary></indexterm>Some
performance metrics have a set of values or instances in each implementing
performance metric domain. For example, one value for each disk, one value
for each process, one value for each CPU, or one value for each activation
of a given application.</para>
<para>When a metric has multiple instances, the PCP framework does not
pollute the Name Space with additional metric names; rather, a single
metric may have an associated set of values. These multiple values are
associated with the members of an <firstterm>instance domain</firstterm>,
such that each instance has a unique instance identifier within the associated
instance domain. For example, the &ldquo;per CPU&rdquo; instance domain
may use the instance identifiers 0, 1, 2, 3, and so on to identify the
configured processors in the system.</para>
<para>Internally, instance identifiers are encoded as binary values, but
each performance metric domain also supports corresponding strings as
external names for the instance identifiers, and these names are used
at the user interface to the PCP utilities.</para>
<para>For example, the performance metric <literal>disk.dev.total</literal>
counts I/O operations for each disk spindle, and the associated instance
domain contains one member for each disk spindle. On a system with five
specific disks, one value would be associated with each of the external
and internal instance identifier pairs shown in <xref linkend="LE99129-TITLE">.
</para>
<table frame="topbot">
<tbltitle id="LE99129-TITLE">Sample Instance Identifiers for Disk Statistics
</tbltitle>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="198*">
<colspec colwidth="198*">
<thead>
<row rowsep="1"><entry align="left" valign="bottom"><para>External Instance
Identifier</para></entry><entry align="left" valign="bottom"><para>Internal
Instance Identifier</para></entry></row></thead>
<tbody>
<row>
<entry align="left" valign="top"><para>dks1d1</para></entry>
<entry align="left" valign="top"><para>131329</para></entry></row>
<row>
<entry align="left" valign="top"><para>dks1d2</para></entry>
<entry align="left" valign="top"><para>131330</para></entry></row>
<row>
<entry align="left" valign="top"><para>dks1d3</para></entry>
<entry align="left" valign="top"><para>131331</para></entry></row>
<row>
<entry align="left" valign="top"><para>dks3d1</para></entry>
<entry align="left" valign="top"><para>131841</para></entry></row>
<row>
<entry align="left" valign="top"><para>dks3d2</para></entry>
<entry align="left" valign="top"><para>131842</para></entry></row></tbody>
</tgroup></table>
<para>Multiple performance metrics may be associated with a single instance
domain.</para>
<para>Each performance metric domain may dynamically establish the instances
within an instance domain. For example, there may be one instance for
the metric <literal>kernel.percpu.idle</literal> on a workstation, but
multiple instances on a multiprocessor server. Even more dynamic is <literal>
filesys.free</literal>, where the values report the amount of free space
per file system, and the number of values tracks the mounting and unmounting
of local filesystems.</para>
<para>PCP arranges for information describing instance domains to be exported
from the performance metric domains to the applications that require this
information. Applications may also choose to retrieve values for all instances
of a performance metric, or some arbitrary subset of the available instances.
</para>
</section>
</section>
<section><?Pub Caret1>
<title>Collector and Monitor Roles</title>
<para><indexterm id="ITch01-155"><primary>roles</primary><secondary>collector
</secondary></indexterm><indexterm><primary>roles</primary><secondary>
monitor</secondary></indexterm>Hosts supporting PCP services are broadly
classified into two categories:</para>
<deflist id="Z926617459sdc">
<deflistentry>
<term>Collector</term>
<listitem><para><indexterm id="ITch01-156"><primary>collector hosts</primary>
</indexterm><indexterm><primary>PMDA</primary><secondary>collectors</secondary>
</indexterm>Hosts that have <literal>pmcd</literal> and one or more performance
metric domain agents (PMDAs) running to collect and export performance
metrics</para>
</listitem></deflistentry>
<deflistentry>
<term>Monitor</term>
<listitem><para><indexterm><primary>monitor hosts</primary></indexterm>Hosts
that import performance metrics from one or more collector hosts to be
consumed by tools to monitor, manage, or record the performance of the
collector hosts</para>
</listitem></deflistentry>
</deflist>
<para>Each PCP enabled host can operate as a collector, a monitor, or
both.</para>
</section>
<section id="LE75000-PARENT">
<title id="LE75000-TITLE">Performance Metrics Collection System</title>
<para><indexterm id="ITch01-158"><primary>PMCS</primary><secondary>description
</secondary></indexterm><indexterm><primary>Performance Metrics Collection
Subsystem</primary><see>PMCS</see></indexterm> PCP provides an infrastructure
through the Performance Metrics Collection Subsystem (PMCS). It unifies
the autonomous and distributed PMDAs into a cohesive pool of performance
data, and provides the services required to create generalized and powerful
performance tools.</para>
<para>The PMCS provides the framework that underpins the PMAPI, which
is described in the <string strname="007-3434"><citetitle>Performance
Co-Pilot Programmer's Guide</citetitle></string>. The PMCS is responsible
for the following services on behalf of the performance tools developed
on top of the PMAPI:</para>
<itemizedlist>
<listitem><para><indexterm><primary>PMNS</primary><secondary>services
</secondary></indexterm>Distributed Name Space services</para>
</listitem>
<listitem><para><indexterm><primary>instance domain services</primary>
</indexterm>Instance domain services</para>
</listitem>
<listitem><para>Coordination with the processes and procedures required
to control the description, collection, and extraction of performance
metric values from agents that interface to the performance metric domains
</para>
</listitem>
<listitem><para>Servicing incoming requests for local performance metric
values and metadata from applications running either locally or on a remote
system</para>
</listitem></itemizedlist>
</section>
<section>
<title>Retrospective Sources of Performance Metrics</title>
<para><indexterm id="ITch01-159"><primary>performance metrics</primary>
<secondary>retrospective sources</secondary></indexterm>The PMCS described
in the previous section is used when PMAPI clients are requesting performance
metrics from a real-time or live source.</para>
<para>The PMAPI also supports delivery of performance metrics from a historical
source in the form of a PCP archive log. Archive logs are created using
the <literal>pmlogger</literal> utility, and are replayed in an architecture
as shown in <xref linkend="LE70187-TITLE">.</para>
<figure>
<graphic entityref="a12192" scale="NO"></graphic>
<title id="LE70187-TITLE">Architecture for Retrospective Analysis</title>
</figure>
<para>The PMAPI has been designed to minimize the differences required
for an application to process performance data from an archive or from
a real-time source. As a result, most PCP tools support live and retrospective
monitoring with equal facility.</para>
</section>
<section>
<title>Product Extensibility</title>
<para><indexterm id="ITch01-160"><primary>PCP</primary><secondary>extensibility
</secondary></indexterm>Much of the PCP product's potential for attacking
difficult performance problems in production environments comes from the
design philosophy that considers extensibility to be critically important.
</para>
<para>The performance analyst can take advantage of the PCP infrastructure
to deploy value-added performance monitoring tools and services. Here
are some examples:</para>
<itemizedlist>
<listitem><para>Easy extension of the PMCS and PMNS to accommodate new
performance metrics and new sources of performance metrics, in particular
using the interfaces of a special-purpose library to develop new PMDAs
(see the <command sectionref="3">pmda</command> man page)</para>
</listitem>
<listitem><para><indexterm><primary>libpcp_pmda library</primary></indexterm><indexterm>
<primary>libpcp_trace library</primary></indexterm>Use of libraries (<filename>
libpcp_pmda</filename> and <filename>libpcp_trace</filename>) to aid in
the development of new PMDAs to export performance metrics from local
applications</para>
</listitem>
<listitem><para>Operation on any performance metric using generalized
toolkits</para>
</listitem>
<listitem><para>Distribution of PCP components such as collectors across
the network, placing the service where it can do the most good</para>
</listitem>
<listitem><para>Dynamic adjustment to changes in system configuration
</para>
</listitem>
<listitem><para>Flexible customization built into the design of all PCP
tools</para>
</listitem>
<listitem><para>Creation of new monitor applications, using the routines
described in the <command sectionref="3">pmapi</command> man page</para>
</listitem></itemizedlist>
</section>
</section>
</chapter>
<?Pub *0000060194>
