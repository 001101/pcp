kmchart is designed to produce stripcharts from Performance Co-Pilot (PCP)
performance metrics fetched from live sources (one or more pmcd hosts) and
also historical sources (one or more PCP archives).

kmtime is a graphical time controller utility that coordinates time updates
and VCR-like playback for other utilities, such as kmchart and pmval.

Refer to doc/INSTALL for instructions on building these tools.


=== 1.0 TODO list ===

    - Write interactive QA testcases as each area is checked:
	[x] qa/record-testcases
	[x] qa/settings-testcases
	[x] qa/create-save-view-testcases
	[x] qa/create-edit-chart-testcases
	[ ] qa/create-edit-tab-testcases
	[ ] qa/chart-control-testcases
	[ ] qa/help-system-testcases
	[ ] qa/export-print-testcases
	[ ] qa/query-testcases
    - Write automated QA for Save View (need a new command line option),
      then with -C and -c, open (multiple) views, save, then verify.

  kmchart

    - Charting issues
      o No values available is not the same as zero! (plots need to
	display broken lines - see Qwt mailing list posts)
      o Scaling of the tick marks on the Y-axis is not yet correct,
	and causes mis-alignment on the unified X-axis.  The disk
	throughput (bytes) show this up clearly, for example (for
        vertical alignment code hints, see Qwt mailing list posts).
    - Respond to changes in the sampling interval from kmtime.
    - Timezone support has stopped working
    - Archive time control issues
      o seems to need multiple presses currently to move backward
	(this may be more visible due to increased sample sizes now)
      o Fast forward mode frequently causes kmchart to hang.
      o Fast forward mode can cause Time Axis confusion.
      o Bounds broken sometimes - thinks range is 1970-2038 (min-max)

    - New/Edit Chart Dialog
      o Double click on Available Metric tree names does not expand a
	compressed tree (but works fine for Chart Plots tree).
      o Check selected metrics are valid to plot together before adding
	plots to new/existing charts.
	- Ken's algorithm:
	1. If metrics are counters, update the semantics to reflect rate
	   conversion (simple, unless the time dimension is not 0, which
	   it should not be)
	2. The dimension has to be identical ... nothing clever here,
	   just compare all the fields
		a.dimSpace == b.dimSpace &&
		a.dimTime == b.dimTime &&
		a.dimCount == b.dimCount
	   this is the same test used in pmConvScale()
	3. If the scales are not the same, choose one as the winner
	   (unclear that there is a good algorithm for this) ... use
	   pmConvScale() for the loser
        - Mark's notes as well:
	/*
	 * Add a new metric to an existing chart
	 * "A" is the existing chart
	 * "B" is the plot we're trying to add.
	 */
	If A and B have different space or count dimensions
	then fail "incompatible in the dimensions of Space or Count"
	/*
	  * Time depends on the presence of rate conversion or not
	  */
	If A and B have the same semantics (i.e. instant, discrete or counter)
	but different time units then fail "incompatible time units"
	If B has instant or discrete semantics
		 If A has instant or discrete semantics
			 if A and B have different time dimensions
			 then (as above) fail "incompatible time units"
		 Else
			 /*
			  * B is instantaneous or discrete, A is counter
			  * so A must have time dimension one larger so rate
			  * conversion makes them the same. Also handle the
			  * special case of counter in time != none
			  */
			 if B time dimension != A time dimension - 1 OR
			 B time dimension is zero
			 then fail "incompatible time units"
	Else If A has instant or discrete semantics
		 /*
		  * other way round :
		  * B is a counter, A is instantaneous or discrete
		  * so B must have time dimension one larger so rate
		  * conversion makes them the same. Also handle the
		   * special case of counter in time != none
		  */
		 If B time dimenion -1 != A time dimension OR
		    B has time dimension == 1
		 then fail "incompatible time units"
	If we haven't failed, deal with the units conversion:
		 If B scale space units < A scale space units OR
		    B scale count units < A scale count units
		    ... the new plot needs rescaling to match existing
		 Else
		 If B scale space units > A scale space units OR
		    B scale count units > A scale count units
		     ... all existing plots need rescaling.
		     Dealing with this case isn't particularly easy :)

    - Print mode needs to understand time axis and multiple charts
    - Export mode needs to understand time axis and multiple charts

    - Online Help support
    - Incorporate a Tutorial into online Help
    - Tooltips need to be added across the board.

    - Destructors and memory leak plugging
    - Code audit for TODOs; either fix, exception or add to wishlist.
    - QA test audit for TODOs; either fix, exception or add to wishlist.
    - Need toolbar icons for: Close Chart, Save View, Query & Stop Record,
      Close Tab.
    - Cleanup icons for: Edit Tab, New Tab.

  kmtime

    - Needs online help ala kmchart

  kmquery

    - Argument -button is not working correctly anymore (Qt4)
    - Window initial sizing and resizing still needs work.


=== Wishlist TODO items ===

    - Add the last two missing pieces of functionality from the pmchart
      configuration language - i.e. the "global" and "scheme" keywords.
      o The (colour) scheme keyword should also have some additional UI
	functionality for adding and editing schemes via Settings dialog
	and for changing the scheme in the New/Edit Chart dialogs (add a
	combo box on the Chart Tab, with "#-cycle" mapping to "Default").
      o The global keyword should be accompanied by some Save View dialog
	code to optionally "Preserve window geometry" (default to On).
    - The Qt-based metrics class needs:
      o Per-context support for pmproxy
      o A hash for metric instance values instead of an array
	(to support delete, and better support of dynamic indoms)
    - Make a model (ala. QDirModel) for metric namespace (QmcMetricModel
      or QmcNameSpaceModel?).  Maybe add an (editable) column for labels
      then (and colors, and...?)
    - Use QCompleter class in all file dialog file name line edits.
    - Use QCompleter class on QmcMetricModel?  (for metric selector)
    - Merge chart/source.* and libqmc/qmc_* code.
    - pmproxy support is far from complete:
      . Need libpcp changes (new interfaces) to abstract out the code
	which has a one-trip guard on testing/setting PMPROXY_HOST env
	variable during connect (so multiple contexts can have different
	proxies).
      . Need Qmc support for these interfaces instead of existing code.
      . Need to audit kmchart, see all PMPROXY TODOs in the code.
    - Rethink searching in New/Edit Chart dialogs - could be done by
      making the (gray background) text box double as a search text
      entry point.  Something like vi's /<pattern> key sequence to
      initiate new/next searches, with wrap-around to the top.
      The Firefox mechanism is kinda similar - maybe take a closer
      look at that and see if anything can be borrowed from that.
      Note: Ken has started this - has a bunch of ideas, quickly hit
      limitations of QTreeWidget (and the advantages of a metric
      namespace model, as described above, become quite apparent).
    - A Settings dialog entry for Paths:
      o default folio/archive path dirname
      o initial archives to always load?  (might get out of hand;
	maybe a regex-driven thing to only load last week of data
	in a pmlogger_daily style archive naming convention?)
    - Desktop integration details - basics are done, but:
      o Gnome/KDE icon files need to be installed correctly;
      o MacOSX icon artwork needs further touch-ups to look good;
      o Refer to "Setting the Application Icon" page in QtAssistant.
      o Entry should be created in the Application menu/list/folder.
      o kmchart should be started (with -c) when a View is clicked.
	Might be enough (or best we can do) to just document how this
	is achieved for each supported platform.
    - kmtime should send a message to all clients on show/hide (except
      for the client that explicitly requested the show/hide, if there
      was one) - this would let the clients correctly track whether it
      is visible/not (kmchart displays this state in the Options menu,
      and uses that state to decide whether a hide/show is needed).


=== PCP extensions ===

    - Some pmproxy changes are required in libpcp (see wishlist above)
      which will also require some new PMAPI interfaces.  The reason
      for these changes is to separate out the current behaviour that
      allows only one PMPROXY_HOST setting to be used for the life of
      a PCP client program, and instead allow the user to choose (and
      choose differently for differnt hosts), the pmproxy host that's
      associated with any pmcd host.
    - The pmSetMode(3) API needs a replacement that takes a timeval
      structure for a delta, instead of an integer.  The extended
      time base code should be factored out (into the old, backward
      compatible pmSetMode) and deprecated - used in pmval(1) atm.
    - This timeval delta change needs to be pushed all the way down
      into the PCP context structure, which fortunately isn't exposed
      outside of impl.h (AFAICT) - this would be an issue if it was,
      as the size of that structure will change due to relacing the
      current integer delta with a timeval.
    - Not much uses the integer delta however, its mainly interp.c in
      libpcp that uses it.  Note: libpcp_pmc also has an API that's
      affected here - PMC_Group::setArchiveMode

